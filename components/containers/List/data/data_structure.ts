import ProblemCategory from "@components/ProblemCatetory";

export default{
    "title": "分享丨【算法题单】常用数据结构（前缀和/栈/队列/堆/字典树/并查集/树状数组/线段树）",
    "summary": "",
    "src": "",
    "original_src": "https://leetcode.cn/circle/discuss/mOr1u6",
    "sort": 0,
    "isLeaf": false,
    "solution": "",
    "score": 0,
    "leafChild": [],
    "nonLeafChild": [
        {
            "title": "介绍",
            "summary": "<img src=\"https://pic.leetcode.cn/1713836847-cDYwhf-Programming.jfif\" alt=\"数据结构题单 数据结构入门 数据结构新手教程 数据结构题目 力扣数据结构 leetcode数据结构 灵茶山艾府 灵神\" style=\"width: 100%;\"><br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [],
            "nonLeafChild": [
                {
                    "title": "零、常用枚举技巧",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§0.1 枚举右，维护左",
                            "summary": "对于 **双变量问题**，例如两数之和 $a_i+a_j=t$，可以枚举右边的 $a_j$，转换成 **单变量问题**，也就是在 $a_j$ 左边查找是否有 $a_i = t-a_j$，这可以用哈希表维护。<br>我把这个技巧叫做 **枚举右，维护左**。<br><a href=\"https://leetcode.cn/problems/two-sum/solution/dong-hua-cong-liang-shu-zhi-he-zhong-wo-0yvmj/\">讲解</a><br>下面这些题目，如果可以，请用**一次遍历**实现。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [],
                            "nonLeafChild": [
                                {
                                    "title": "§0.1.1 基础",
                                    "summary": "",
                                    "src": "",
                                    "original_src": "",
                                    "sort": 0,
                                    "isLeaf": false,
                                    "solution": "",
                                    "score": 0,
                                    "leafChild": [
                                        {
                                            "title": "1. 两数之和",
                                            "summary": "",
                                            "src": "/two-sum/",
                                            "original_src": "https://leetcode.cn/problems/two-sum/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2441. 与对应负数同时存在的最大正整数",
                                            "summary": "",
                                            "src": "/largest-positive-integer-that-exists-with-its-negative/",
                                            "original_src": "https://leetcode.cn/problems/largest-positive-integer-that-exists-with-its-negative/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1167.647122501,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1512. 好数对的数目",
                                            "summary": "",
                                            "src": "/number-of-good-pairs/",
                                            "original_src": "https://leetcode.cn/problems/number-of-good-pairs/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1160.8899403409,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2001. 可互换矩形的组数",
                                            "summary": "",
                                            "src": "/number-of-pairs-of-interchangeable-rectangles/",
                                            "original_src": "https://leetcode.cn/problems/number-of-pairs-of-interchangeable-rectangles/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1435.9559888935,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1128. 等价多米诺骨牌对的数量",
                                            "summary": "",
                                            "src": "/number-of-equivalent-domino-pairs/description/",
                                            "original_src": "https://leetcode.cn/problems/number-of-equivalent-domino-pairs/description/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1332.622596763,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "121. 买卖股票的最佳时机",
                                            "summary": "",
                                            "src": "/best-time-to-buy-and-sell-stock/",
                                            "original_src": "https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2016. 增量元素之间的最大差值",
                                            "summary": "",
                                            "src": "/maximum-difference-between-increasing-elements/",
                                            "original_src": "https://leetcode.cn/problems/maximum-difference-between-increasing-elements/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1246.0141927368,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "219. 存在重复元素 II",
                                            "summary": "",
                                            "src": "/contains-duplicate-ii/",
                                            "original_src": "https://leetcode.cn/problems/contains-duplicate-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2260. 必须拿起的最小连续卡牌数",
                                            "summary": "",
                                            "src": "/minimum-consecutive-cards-to-pick-up/",
                                            "original_src": "https://leetcode.cn/problems/minimum-consecutive-cards-to-pick-up/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1364.6787168645,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2815. 数组中的最大数对和",
                                            "summary": "",
                                            "src": "/max-pair-sum-in-an-array/",
                                            "original_src": "https://leetcode.cn/problems/max-pair-sum-in-an-array/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1295.0947625986,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2342. 数位和相等数对的最大和",
                                            "summary": "",
                                            "src": "/max-sum-of-a-pair-with-equal-sum-of-digits/",
                                            "original_src": "https://leetcode.cn/problems/max-sum-of-a-pair-with-equal-sum-of-digits/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1308.9617729374,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1679. K 和数对的最大数目",
                                            "summary": "",
                                            "src": "/max-number-of-k-sum-pairs/",
                                            "original_src": "https://leetcode.cn/problems/max-number-of-k-sum-pairs/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1345.737168609,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "面试题 16.24. 数对和",
                                            "summary": "",
                                            "src": "/pairs-with-sum-lcci/",
                                            "original_src": "https://leetcode.cn/problems/pairs-with-sum-lcci/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3623. 统计梯形的数目 I",
                                            "summary": "",
                                            "src": "/count-number-of-trapezoids-i/",
                                            "original_src": "https://leetcode.cn/problems/count-number-of-trapezoids-i/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3371. 识别数组中的最大异常值",
                                            "summary": "",
                                            "src": "/identify-the-largest-outlier-in-an-array/",
                                            "original_src": "https://leetcode.cn/problems/identify-the-largest-outlier-in-an-array/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1643.7450467383,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "624. 数组列表中的最大距离",
                                            "summary": "",
                                            "src": "/maximum-distance-in-arrays/",
                                            "original_src": "https://leetcode.cn/problems/maximum-distance-in-arrays/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2364. 统计坏数对的数目",
                                            "summary": "",
                                            "src": "/count-number-of-bad-pairs/",
                                            "original_src": "https://leetcode.cn/problems/count-number-of-bad-pairs/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1622.2389577197,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1014. 最佳观光组合",
                                            "summary": "",
                                            "src": "/best-sightseeing-pair/",
                                            "original_src": "https://leetcode.cn/problems/best-sightseeing-pair/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1730.3052054913,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1814. 统计一个数组中好对子的数目",
                                            "summary": "",
                                            "src": "/count-nice-pairs-in-an-array/",
                                            "original_src": "https://leetcode.cn/problems/count-nice-pairs-in-an-array/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1737.8431142688,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2905. 找出满足差值条件的下标 II",
                                            "summary": "",
                                            "src": "/find-indices-with-index-and-value-difference-ii/",
                                            "original_src": "https://leetcode.cn/problems/find-indices-with-index-and-value-difference-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1763.787679959,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3584. 子序列首尾元素的最大乘积",
                                            "summary": "",
                                            "src": "/maximum-product-of-first-and-last-elements-of-a-subsequence/",
                                            "original_src": "https://leetcode.cn/problems/maximum-product-of-first-and-last-elements-of-a-subsequence/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        }
                                    ],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "§0.1.2 进阶",
                                    "summary": "**思维扩展**：<br>",
                                    "src": "",
                                    "original_src": "",
                                    "sort": 0,
                                    "isLeaf": false,
                                    "solution": "",
                                    "score": 0,
                                    "leafChild": [
                                        {
                                            "title": "1010. 总持续时间可被 60 整除的歌曲",
                                            "summary": "",
                                            "src": "/pairs-of-songs-with-total-durations-divisible-by-60/",
                                            "original_src": "https://leetcode.cn/problems/pairs-of-songs-with-total-durations-divisible-by-60/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1377.1913915125,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3185. 构成整天的下标对数目 II",
                                            "summary": "",
                                            "src": "/count-pairs-that-form-a-complete-day-ii/",
                                            "original_src": "https://leetcode.cn/problems/count-pairs-that-form-a-complete-day-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1385.2857255388,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2748. 美丽下标对的数目",
                                            "summary": "",
                                            "src": "/number-of-beautiful-pairs/",
                                            "original_src": "https://leetcode.cn/problems/number-of-beautiful-pairs/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1301.1576743638,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2506. 统计相似字符串对的数目",
                                            "summary": "",
                                            "src": "/count-pairs-of-similar-strings/",
                                            "original_src": "https://leetcode.cn/problems/count-pairs-of-similar-strings/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1335.4613368501,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2874. 有序三元组中的最大值 II",
                                            "summary": "",
                                            "src": "/maximum-value-of-an-ordered-triplet-ii/",
                                            "original_src": "https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1583.212966224,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1031. 两个非重叠子数组的最大和",
                                            "summary": "",
                                            "src": "/maximum-sum-of-two-non-overlapping-subarrays/",
                                            "original_src": "https://leetcode.cn/problems/maximum-sum-of-two-non-overlapping-subarrays/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1680.4852623991,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2555. 两个线段获得的最多奖品",
                                            "summary": "",
                                            "src": "/maximize-win-from-two-segments/",
                                            "original_src": "https://leetcode.cn/problems/maximize-win-from-two-segments/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 2080.7845644831,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1995. 统计特殊四元组",
                                            "summary": "",
                                            "src": "/count-special-quadruplets/",
                                            "original_src": "https://leetcode.cn/problems/count-special-quadruplets/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1352.1791099256,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3404. 统计特殊子序列的数目",
                                            "summary": "",
                                            "src": "/count-special-subsequences/",
                                            "original_src": "https://leetcode.cn/problems/count-special-subsequences/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 2445.3859371333,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3267. 统计近似相等数对 II",
                                            "summary": "",
                                            "src": "/count-almost-equal-pairs-ii/",
                                            "original_src": "https://leetcode.cn/problems/count-almost-equal-pairs-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 2545.1080433595,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "1214. 查找两棵二叉搜索树之和",
                                            "summary": "",
                                            "src": "/two-sum-bsts/",
                                            "original_src": "https://leetcode.cn/problems/two-sum-bsts/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 1389.0328392117,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": true,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "2964. 可被整除的三元组数量",
                                            "summary": "",
                                            "src": "/number-of-divisible-triplet-sums/",
                                            "original_src": "https://leetcode.cn/problems/number-of-divisible-triplet-sums/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": true,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "454. 四数相加 II",
                                            "summary": "",
                                            "src": "/4sum-ii/",
                                            "original_src": "https://leetcode.cn/problems/4sum-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": null,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3027. 人员站位的方案数 II",
                                            "summary": "",
                                            "src": "/find-the-number-of-ways-to-place-people-ii/",
                                            "original_src": "https://leetcode.cn/problems/find-the-number-of-ways-to-place-people-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 2020.1846215023,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        },
                                        {
                                            "title": "3548. 等和矩阵分割 II",
                                            "summary": "",
                                            "src": "/equal-sum-grid-partition-ii/",
                                            "original_src": "https://leetcode.cn/problems/equal-sum-grid-partition-ii/",
                                            "sort": 0,
                                            "isLeaf": true,
                                            "solution": null,
                                            "score": 2245.1397243876,
                                            "leafChild": [],
                                            "nonLeafChild": [],
                                            "isPremium": false,
                                            "last_update": ""
                                        }
                                    ],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§0.2 枚举中间",
                            "summary": "对于三个或者四个变量的问题，枚举中间的变量往往更好算。<br>为什么？比如问题有三个下标，需要满足 $0\\le i<j<k<n$，对比一下：<br>- 枚举 $i$，后续计算中还需保证 $j < k$。<br>- 枚举 $j$，那么 $i$ 和 $k$ 自动被 $j$ 隔开，互相独立，后续计算中无需关心 $i$ 和 $k$ 的位置关系。<br>所以枚举中间的变量更简单。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "2909. 元素和最小的山形三元组 II",
                                    "summary": "",
                                    "src": "/minimum-sum-of-mountain-triplets-ii/",
                                    "original_src": "https://leetcode.cn/problems/minimum-sum-of-mountain-triplets-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1478.8676835951,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3583. 统计特殊三元组",
                                    "summary": "",
                                    "src": "/count-special-triplets/",
                                    "original_src": "https://leetcode.cn/problems/count-special-triplets/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1930. 长度为 3 的不同回文子序列",
                                    "summary": "",
                                    "src": "/unique-length-3-palindromic-subsequences/",
                                    "original_src": "https://leetcode.cn/problems/unique-length-3-palindromic-subsequences/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1533.3376144199,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3128. 直角三角形",
                                    "summary": "",
                                    "src": "/right-triangles/",
                                    "original_src": "https://leetcode.cn/problems/right-triangles/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1540.8447688369,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2874. 有序三元组中的最大值 II",
                                    "summary": "",
                                    "src": "/maximum-value-of-an-ordered-triplet-ii/",
                                    "original_src": "https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1583.212966224,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "447. 回旋镖的数量",
                                    "summary": "",
                                    "src": "/number-of-boomerangs/",
                                    "original_src": "https://leetcode.cn/problems/number-of-boomerangs/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "456. 132 模式",
                                    "summary": "",
                                    "src": "/132-pattern/",
                                    "original_src": "https://leetcode.cn/problems/132-pattern/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3067. 在带权树网络中统计可连接服务器对数目",
                                    "summary": "",
                                    "src": "/count-pairs-of-connectable-servers-in-a-weighted-tree-network/",
                                    "original_src": "https://leetcode.cn/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1908.9411092109,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1534. 统计好三元组",
                                    "summary": "",
                                    "src": "/count-good-triplets/",
                                    "original_src": "https://leetcode.cn/problems/count-good-triplets/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1279.3383966145,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3455. 最短匹配子字符串",
                                    "summary": "",
                                    "src": "/shortest-matching-substring/",
                                    "original_src": "https://leetcode.cn/problems/shortest-matching-substring/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2303.1891955206,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2242. 节点序列的最大得分",
                                    "summary": "",
                                    "src": "/maximum-score-of-a-node-sequence/",
                                    "original_src": "https://leetcode.cn/problems/maximum-score-of-a-node-sequence/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2304.3094138939,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2867. 统计树中的合法路径数目",
                                    "summary": "",
                                    "src": "/count-valid-paths-in-a-tree/",
                                    "original_src": "https://leetcode.cn/problems/count-valid-paths-in-a-tree/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2428.3242593838,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2552. 统计上升四元组",
                                    "summary": "",
                                    "src": "/count-increasing-quadruplets/",
                                    "original_src": "https://leetcode.cn/problems/count-increasing-quadruplets/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2432.713399111,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3257. 放三个车的价值之和最大 II",
                                    "summary": "",
                                    "src": "/maximum-value-sum-by-placing-three-rooks-ii/",
                                    "original_src": "https://leetcode.cn/problems/maximum-value-sum-by-placing-three-rooks-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2553.2367142614,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3073. 最大递增三元组",
                                    "summary": "",
                                    "src": "/maximum-increasing-triplet-value/",
                                    "original_src": "https://leetcode.cn/problems/maximum-increasing-triplet-value/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "一、前缀和",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§1.1 前缀和基础",
                            "summary": "<a href=\"https://leetcode.cn/problems/range-sum-query-immutable/solution/qian-zhui-he-ji-qi-kuo-zhan-fu-ti-dan-py-vaar/\">讲解</a><br>**左闭右开公式**：下标为左闭右开区间 $[\\textit{left},\\textit{right})$ 的元素和就是 $\\textit{sum}[\\textit{right}] - \\textit{sum}[\\textit{left}]$。<br>**思维扩展**：<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "303. 区域和检索 - 数组不可变",
                                    "summary": "",
                                    "src": "/range-sum-query-immutable/",
                                    "original_src": "https://leetcode.cn/problems/range-sum-query-immutable/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3427. 变长子数组求和",
                                    "summary": "",
                                    "src": "/sum-of-variable-length-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/sum-of-variable-length-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1215.6806967423,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2559. 统计范围内的元音字符串数",
                                    "summary": "",
                                    "src": "/count-vowel-strings-in-ranges/",
                                    "original_src": "https://leetcode.cn/problems/count-vowel-strings-in-ranges/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1435.0179887342,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3152. 特殊数组 II",
                                    "summary": "",
                                    "src": "/special-array-ii/",
                                    "original_src": "https://leetcode.cn/problems/special-array-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1523.2643084719,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1749. 任意子数组和的绝对值的最大值",
                                    "summary": "",
                                    "src": "/maximum-absolute-sum-of-any-subarray/",
                                    "original_src": "https://leetcode.cn/problems/maximum-absolute-sum-of-any-subarray/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1541.6176288991,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2389. 和有限的最长子序列",
                                    "summary": "",
                                    "src": "/longest-subsequence-with-limited-sum/",
                                    "original_src": "https://leetcode.cn/problems/longest-subsequence-with-limited-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1387.7347071166,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3361. 两个字符串的切换距离",
                                    "summary": "",
                                    "src": "/shift-distance-between-two-strings/",
                                    "original_src": "https://leetcode.cn/problems/shift-distance-between-two-strings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1553.2232121523,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2055. 蜡烛之间的盘子",
                                    "summary": "",
                                    "src": "/plates-between-candles/",
                                    "original_src": "https://leetcode.cn/problems/plates-between-candles/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1819.3068421506,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？",
                                    "summary": "",
                                    "src": "/can-you-eat-your-favorite-candy-on-your-favorite-day/",
                                    "original_src": "https://leetcode.cn/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1858.9581916885,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "53. 最大子数组和",
                                    "summary": "",
                                    "src": "/maximum-subarray/",
                                    "original_src": "https://leetcode.cn/problems/maximum-subarray/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3511. 构造正数组",
                                    "summary": "",
                                    "src": "/make-a-positive-array/",
                                    "original_src": "https://leetcode.cn/problems/make-a-positive-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "3540. 访问所有房屋的最短时间",
                                    "summary": "",
                                    "src": "/minimum-time-to-visit-all-houses/",
                                    "original_src": "https://leetcode.cn/problems/minimum-time-to-visit-all-houses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1523. 在区间范围内统计奇数数目",
                                    "summary": "",
                                    "src": "/count-odd-numbers-in-an-interval-range/",
                                    "original_src": "https://leetcode.cn/problems/count-odd-numbers-in-an-interval-range/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1209.3722198224,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§1.2 前缀和与哈希表",
                            "summary": "通常要用到「枚举右，维护左」的技巧。<br><a href=\"https://leetcode.cn/problems/subarray-sum-equals-k/solution/qian-zhui-he-ha-xi-biao-cong-liang-ci-bi-4mwr/\">讲解</a><br>**前缀和与有序集合**：<br>**思维扩展**：<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "930. 和相同的二元子数组",
                                    "summary": "",
                                    "src": "/binary-subarrays-with-sum/",
                                    "original_src": "https://leetcode.cn/problems/binary-subarrays-with-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1591.5492530876,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "560. 和为 K 的子数组",
                                    "summary": "",
                                    "src": "/subarray-sum-equals-k/",
                                    "original_src": "https://leetcode.cn/problems/subarray-sum-equals-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1524. 和为奇数的子数组数目",
                                    "summary": "",
                                    "src": "/number-of-sub-arrays-with-odd-sum/",
                                    "original_src": "https://leetcode.cn/problems/number-of-sub-arrays-with-odd-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1610.569398159,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "974. 和可被 K 整除的子数组",
                                    "summary": "",
                                    "src": "/subarray-sums-divisible-by-k/",
                                    "original_src": "https://leetcode.cn/problems/subarray-sums-divisible-by-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1675.989407584,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "523. 连续的子数组和",
                                    "summary": "",
                                    "src": "/continuous-subarray-sum/",
                                    "original_src": "https://leetcode.cn/problems/continuous-subarray-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "437. 路径总和 III",
                                    "summary": "",
                                    "src": "/path-sum-iii/",
                                    "original_src": "https://leetcode.cn/problems/path-sum-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2588. 统计美丽子数组数目",
                                    "summary": "",
                                    "src": "/count-the-number-of-beautiful-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/count-the-number-of-beautiful-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1696.8895579594,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "525. 连续数组",
                                    "summary": "",
                                    "src": "/contiguous-array/",
                                    "original_src": "https://leetcode.cn/problems/contiguous-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "面试题 17.05. 字母与数字",
                                    "summary": "",
                                    "src": "/find-longest-subarray-lcci/",
                                    "original_src": "https://leetcode.cn/problems/find-longest-subarray-lcci/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3026. 最大好子数组和",
                                    "summary": "",
                                    "src": "/maximum-good-subarray-sum/",
                                    "original_src": "https://leetcode.cn/problems/maximum-good-subarray-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1816.556997127,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1477. 找两个和为目标值且不重叠的子数组",
                                    "summary": "",
                                    "src": "/find-two-non-overlapping-sub-arrays-each-with-target-sum/",
                                    "original_src": "https://leetcode.cn/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1850.5506342426,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1546. 和为目标值且不重叠的非空子数组的最大数目",
                                    "summary": "",
                                    "src": "/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1855.377046154,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1124. 表现良好的最长时间段",
                                    "summary": "",
                                    "src": "/longest-well-performing-interval/",
                                    "original_src": "https://leetcode.cn/problems/longest-well-performing-interval/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1908.3866125757,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3381. 长度可被 K 整除的子数组的最大元素和",
                                    "summary": "",
                                    "src": "/maximum-subarray-sum-with-length-divisible-by-k/",
                                    "original_src": "https://leetcode.cn/problems/maximum-subarray-sum-with-length-divisible-by-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1943.095489145,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2488. 统计中位数为 K 的子数组",
                                    "summary": "",
                                    "src": "/count-subarrays-with-median-k/",
                                    "original_src": "https://leetcode.cn/problems/count-subarrays-with-median-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1998.889914712,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1590. 使数组和能被 P 整除",
                                    "summary": "",
                                    "src": "/make-sum-divisible-by-p/",
                                    "original_src": "https://leetcode.cn/problems/make-sum-divisible-by-p/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2038.8592725467,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2845. 统计趣味子数组的数目",
                                    "summary": "",
                                    "src": "/count-of-interesting-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/count-of-interesting-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2073.048019317,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1074. 元素和为目标值的子矩阵数量",
                                    "summary": "",
                                    "src": "/number-of-submatrices-that-sum-to-target/",
                                    "original_src": "https://leetcode.cn/problems/number-of-submatrices-that-sum-to-target/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2189.3802630548,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1442. 形成两个异或相等数组的三元组数目",
                                    "summary": "",
                                    "src": "/count-triplets-that-can-form-two-arrays-of-equal-xor/",
                                    "original_src": "https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1524.5693481538,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2949. 统计美丽子字符串 II",
                                    "summary": "",
                                    "src": "/count-beautiful-substrings-ii/",
                                    "original_src": "https://leetcode.cn/problems/count-beautiful-substrings-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2444.7192647604,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "325. 和等于 k 的最长子数组长度",
                                    "summary": "",
                                    "src": "/maximum-size-subarray-sum-equals-k/",
                                    "original_src": "https://leetcode.cn/problems/maximum-size-subarray-sum-equals-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "548. 将数组分割成和相等的子数组",
                                    "summary": "",
                                    "src": "/split-array-with-equal-sum/",
                                    "original_src": "https://leetcode.cn/problems/split-array-with-equal-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1983. 范围和相等的最宽索引对",
                                    "summary": "",
                                    "src": "/widest-pair-of-indices-with-equal-range-sum/",
                                    "original_src": "https://leetcode.cn/problems/widest-pair-of-indices-with-equal-range-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2489. 固定比率的子字符串数",
                                    "summary": "",
                                    "src": "/number-of-substrings-with-fixed-ratio/",
                                    "original_src": "https://leetcode.cn/problems/number-of-substrings-with-fixed-ratio/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2950. 可整除子串的数量",
                                    "summary": "",
                                    "src": "/number-of-divisible-substrings/",
                                    "original_src": "https://leetcode.cn/problems/number-of-divisible-substrings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "3364. 最小正和子数组",
                                    "summary": "",
                                    "src": "/minimum-positive-sum-subarray/",
                                    "original_src": "https://leetcode.cn/problems/minimum-positive-sum-subarray/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1300.5576941005,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "363. 矩形区域不超过 K 的最大数值和",
                                    "summary": "",
                                    "src": "/max-sum-of-rectangle-no-larger-than-k/",
                                    "original_src": "https://leetcode.cn/problems/max-sum-of-rectangle-no-larger-than-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2025. 分割数组的最多方案数",
                                    "summary": "",
                                    "src": "/maximum-number-of-ways-to-partition-an-array/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-ways-to-partition-an-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2217.8090802563,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§1.3 距离和",
                            "summary": "<a href=\"https://leetcode.cn/problems/minimum-operations-to-make-all-array-elements-equal/solution/yi-tu-miao-dong-pai-xu-qian-zhui-he-er-f-nf55/\">图解</a><br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1685. 有序数组中差绝对值之和",
                                    "summary": "",
                                    "src": "/sum-of-absolute-differences-in-a-sorted-array/",
                                    "original_src": "https://leetcode.cn/problems/sum-of-absolute-differences-in-a-sorted-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1495.715740828,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2615. 等值距离和",
                                    "summary": "",
                                    "src": "/sum-of-distances/",
                                    "original_src": "https://leetcode.cn/problems/sum-of-distances/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1793.3033536992,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2602. 使数组元素全部相等的最少操作次数",
                                    "summary": "",
                                    "src": "/minimum-operations-to-make-all-array-elements-equal/",
                                    "original_src": "https://leetcode.cn/problems/minimum-operations-to-make-all-array-elements-equal/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1903.1973989877,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2968. 执行操作使频率分数最大",
                                    "summary": "",
                                    "src": "/apply-operations-to-maximize-frequency-score/",
                                    "original_src": "https://leetcode.cn/problems/apply-operations-to-maximize-frequency-score/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2444.2791027022,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1703. 得到连续 K 个 1 的最少相邻交换次数",
                                    "summary": "",
                                    "src": "/minimum-adjacent-swaps-for-k-consecutive-ones/",
                                    "original_src": "https://leetcode.cn/problems/minimum-adjacent-swaps-for-k-consecutive-ones/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2466.8891773908,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3086. 拾起 K 个 1 需要的最少行动次数",
                                    "summary": "",
                                    "src": "/minimum-moves-to-pick-k-ones/",
                                    "original_src": "https://leetcode.cn/problems/minimum-moves-to-pick-k-ones/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2672.7613091907,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3422. 将子数组元素变为相等所需的最小操作数",
                                    "summary": "",
                                    "src": "/minimum-operations-to-make-subarray-elements-equal/",
                                    "original_src": "https://leetcode.cn/problems/minimum-operations-to-make-subarray-elements-equal/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§1.4 前缀异或和",
                            "summary": "推荐先阅读：<a href=\"https://leetcode.cn/circle/discuss/CaOJ45/\">从集合论到位运算，常见位运算技巧分类总结！</a><br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1177. 构建回文串检测",
                                    "summary": "",
                                    "src": "/can-make-palindrome-from-substring/",
                                    "original_src": "https://leetcode.cn/problems/can-make-palindrome-from-substring/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1848.0912848518,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1371. 每个元音包含偶数次的最长子字符串",
                                    "summary": "",
                                    "src": "/find-the-longest-substring-containing-vowels-in-even-counts/",
                                    "original_src": "https://leetcode.cn/problems/find-the-longest-substring-containing-vowels-in-even-counts/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2040.539289037,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1542. 找出最长的超赞子字符串",
                                    "summary": "",
                                    "src": "/find-longest-awesome-substring/",
                                    "original_src": "https://leetcode.cn/problems/find-longest-awesome-substring/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2221.7336557442,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1915. 最美子字符串的数目",
                                    "summary": "",
                                    "src": "/number-of-wonderful-substrings/",
                                    "original_src": "https://leetcode.cn/problems/number-of-wonderful-substrings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2234.9191877602,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2791. 树中可以形成回文的路径数",
                                    "summary": "",
                                    "src": "/count-paths-that-can-form-a-palindrome-in-a-tree/",
                                    "original_src": "https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2677.1682592316,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§1.5 其他一维前缀和",
                            "summary": "**思维扩展**：<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1310. 子数组异或查询",
                                    "summary": "",
                                    "src": "/xor-queries-of-a-subarray/",
                                    "original_src": "https://leetcode.cn/problems/xor-queries-of-a-subarray/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1459.8208951847,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2438. 二的幂数组中查询范围内的乘积",
                                    "summary": "",
                                    "src": "/range-product-queries-of-powers/",
                                    "original_src": "https://leetcode.cn/problems/range-product-queries-of-powers/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1609.7858209851,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1895. 最大的幻方",
                                    "summary": "",
                                    "src": "/largest-magic-square/",
                                    "original_src": "https://leetcode.cn/problems/largest-magic-square/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1781.3664141686,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1878. 矩阵中最大的三个菱形和",
                                    "summary": "",
                                    "src": "/get-biggest-three-rhombus-sums-in-a-grid/",
                                    "original_src": "https://leetcode.cn/problems/get-biggest-three-rhombus-sums-in-a-grid/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1897.5516652727,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1031. 两个非重叠子数组的最大和",
                                    "summary": "",
                                    "src": "/maximum-sum-of-two-non-overlapping-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/maximum-sum-of-two-non-overlapping-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1680.4852623991,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2245. 转角路径的乘积中最多能有几个尾随零",
                                    "summary": "",
                                    "src": "/maximum-trailing-zeros-in-a-cornered-path/",
                                    "original_src": "https://leetcode.cn/problems/maximum-trailing-zeros-in-a-cornered-path/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2036.7410194704,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1712. 将数组分成三个子数组的方案数",
                                    "summary": "",
                                    "src": "/ways-to-split-array-into-three-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/ways-to-split-array-into-three-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2078.6986769435,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1862. 向下取整数对和",
                                    "summary": "",
                                    "src": "/sum-of-floored-pairs/",
                                    "original_src": "https://leetcode.cn/problems/sum-of-floored-pairs/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2170.1079846744,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2281. 巫师的总力量和",
                                    "summary": "",
                                    "src": "/sum-of-total-strength-of-wizards/",
                                    "original_src": "https://leetcode.cn/problems/sum-of-total-strength-of-wizards/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2621.1208072273,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3445. 奇偶频次间的最大差值 II",
                                    "summary": "",
                                    "src": "/maximum-difference-between-even-and-odd-frequency-ii/",
                                    "original_src": "https://leetcode.cn/problems/maximum-difference-between-even-and-odd-frequency-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2693.5604276923,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2983. 回文串重新排列查询",
                                    "summary": "",
                                    "src": "/palindrome-rearrangement-queries/",
                                    "original_src": "https://leetcode.cn/problems/palindrome-rearrangement-queries/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2779.7855167601,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2955. 同端子串的数量",
                                    "summary": "",
                                    "src": "/number-of-same-end-substrings/",
                                    "original_src": "https://leetcode.cn/problems/number-of-same-end-substrings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1788. 最大化花园的美观度",
                                    "summary": "",
                                    "src": "/maximize-the-beauty-of-the-garden/",
                                    "original_src": "https://leetcode.cn/problems/maximize-the-beauty-of-the-garden/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2819. 购买巧克力后的最小相对损失",
                                    "summary": "",
                                    "src": "/minimum-relative-loss-after-buying-chocolates/",
                                    "original_src": "https://leetcode.cn/problems/minimum-relative-loss-after-buying-chocolates/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1534. 统计好三元组",
                                    "summary": "",
                                    "src": "/count-good-triplets/",
                                    "original_src": "https://leetcode.cn/problems/count-good-triplets/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1279.3383966145,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§1.6 二维前缀和",
                            "summary": "<a href=\"https://leetcode.cn/problems/range-sum-query-2d-immutable/solution/tu-jie-yi-zhang-tu-miao-dong-er-wei-qian-84qp/\">【图解】一张图秒懂二维前缀和！</a><br>二维前缀最小值：<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "304. 二维区域和检索 - 矩阵不可变",
                                    "summary": "",
                                    "src": "/range-sum-query-2d-immutable/",
                                    "original_src": "https://leetcode.cn/problems/range-sum-query-2d-immutable/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1314. 矩阵区域和",
                                    "summary": "",
                                    "src": "/matrix-block-sum/",
                                    "original_src": "https://leetcode.cn/problems/matrix-block-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1483.8137189709,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3070. 元素和小于等于 k 的子矩阵的数目",
                                    "summary": "",
                                    "src": "/count-submatrices-with-top-left-element-and-sum-less-than-k/",
                                    "original_src": "https://leetcode.cn/problems/count-submatrices-with-top-left-element-and-sum-less-than-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1498.6899053656,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1738. 找出第 K 大的异或坐标值",
                                    "summary": "",
                                    "src": "/find-kth-largest-xor-coordinate-value/",
                                    "original_src": "https://leetcode.cn/problems/find-kth-largest-xor-coordinate-value/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1671.4657554194,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3212. 统计 X 和 Y 频数相等的子矩阵数量",
                                    "summary": "",
                                    "src": "/count-submatrices-with-equal-frequency-of-x-and-y/",
                                    "original_src": "https://leetcode.cn/problems/count-submatrices-with-equal-frequency-of-x-and-y/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1672.7732068421,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1292. 元素和小于等于阈值的正方形的最大边长",
                                    "summary": "",
                                    "src": "/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/",
                                    "original_src": "https://leetcode.cn/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1734.8208369949,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3148. 矩阵中的最大得分",
                                    "summary": "",
                                    "src": "/maximum-difference-score-in-a-grid/",
                                    "original_src": "https://leetcode.cn/problems/maximum-difference-score-in-a-grid/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1819.6800324413,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "二、差分",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§2.1 一维差分（扫描线）",
                            "summary": "差分与前缀和的关系，类似导数与积分的关系。<br>数组 $a$ 的差分的前缀和就是数组 $a$。<br><a href=\"https://leetcode.cn/problems/car-pooling/solution/suan-fa-xiao-ke-tang-chai-fen-shu-zu-fu-9d4ra/\">原理讲解</a><br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "2848. 与车相交的点",
                                    "summary": "",
                                    "src": "/points-that-intersect-with-cars/",
                                    "original_src": "https://leetcode.cn/problems/points-that-intersect-with-cars/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1229.7575626899,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1893. 检查是否区域内所有整数都被覆盖",
                                    "summary": "",
                                    "src": "/check-if-all-the-integers-in-a-range-are-covered/",
                                    "original_src": "https://leetcode.cn/problems/check-if-all-the-integers-in-a-range-are-covered/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1307.3797385769,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1854. 人口最多的年份",
                                    "summary": "",
                                    "src": "/maximum-population-year/",
                                    "original_src": "https://leetcode.cn/problems/maximum-population-year/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1370.4186698287,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2960. 统计已测试设备",
                                    "summary": "",
                                    "src": "/count-tested-devices-after-test-operations/",
                                    "original_src": "https://leetcode.cn/problems/count-tested-devices-after-test-operations/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1169.4209117977,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1094. 拼车",
                                    "summary": "",
                                    "src": "/car-pooling/",
                                    "original_src": "https://leetcode.cn/problems/car-pooling/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1441.4290319373,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1109. 航班预订统计",
                                    "summary": "",
                                    "src": "/corporate-flight-bookings/",
                                    "original_src": "https://leetcode.cn/problems/corporate-flight-bookings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1569.7528744586,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3355. 零数组变换 I",
                                    "summary": "",
                                    "src": "/zero-array-transformation-i/",
                                    "original_src": "https://leetcode.cn/problems/zero-array-transformation-i/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1591.445677589,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "56. 合并区间",
                                    "summary": "",
                                    "src": "/merge-intervals/",
                                    "original_src": "https://leetcode.cn/problems/merge-intervals/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "57. 插入区间",
                                    "summary": "",
                                    "src": "/insert-interval/",
                                    "original_src": "https://leetcode.cn/problems/insert-interval/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "732. 我的日程安排表 III",
                                    "summary": "",
                                    "src": "/my-calendar-iii/",
                                    "original_src": "https://leetcode.cn/problems/my-calendar-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2406. 将区间分为最少组数",
                                    "summary": "",
                                    "src": "/divide-intervals-into-minimum-number-of-groups/",
                                    "original_src": "https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1713.3954468582,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3453. 分割正方形 I",
                                    "summary": "",
                                    "src": "/separate-squares-i/",
                                    "original_src": "https://leetcode.cn/problems/separate-squares-i/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1735.4106121238,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2381. 字母移位 II",
                                    "summary": "",
                                    "src": "/shifting-letters-ii/",
                                    "original_src": "https://leetcode.cn/problems/shifting-letters-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1793.3037316825,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "995. K 连续位的最小翻转次数",
                                    "summary": "",
                                    "src": "/minimum-number-of-k-consecutive-bit-flips/",
                                    "original_src": "https://leetcode.cn/problems/minimum-number-of-k-consecutive-bit-flips/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1835.4868365659,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1589. 所有排列中的最大和",
                                    "summary": "",
                                    "src": "/maximum-sum-obtained-of-any-permutation/",
                                    "original_src": "https://leetcode.cn/problems/maximum-sum-obtained-of-any-permutation/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1871.3112059413,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1526. 形成目标数组的子数组最少增加次数",
                                    "summary": "",
                                    "src": "/minimum-number-of-increments-on-subarrays-to-form-a-target-array/",
                                    "original_src": "https://leetcode.cn/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1872.0350138774,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3356. 零数组变换 II",
                                    "summary": "",
                                    "src": "/zero-array-transformation-ii/",
                                    "original_src": "https://leetcode.cn/problems/zero-array-transformation-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1913.4834168162,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1943. 描述绘画结果",
                                    "summary": "",
                                    "src": "/describe-the-painting/",
                                    "original_src": "https://leetcode.cn/problems/describe-the-painting/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1969.2019235672,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3224. 使差值相等的最少数组改动次数",
                                    "summary": "",
                                    "src": "/minimum-array-changes-to-make-differences-equal/",
                                    "original_src": "https://leetcode.cn/problems/minimum-array-changes-to-make-differences-equal/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1996.0986736442,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2251. 花期内花的数目",
                                    "summary": "",
                                    "src": "/number-of-flowers-in-full-bloom/",
                                    "original_src": "https://leetcode.cn/problems/number-of-flowers-in-full-bloom/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2022.3137128296,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2772. 使数组中的所有元素都等于零",
                                    "summary": "",
                                    "src": "/apply-operations-to-make-all-array-elements-equal-to-zero/",
                                    "original_src": "https://leetcode.cn/problems/apply-operations-to-make-all-array-elements-equal-to-zero/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2029.4024513478,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3229. 使数组等于目标数组所需的最少操作次数",
                                    "summary": "",
                                    "src": "/minimum-operations-to-make-array-equal-to-target/",
                                    "original_src": "https://leetcode.cn/problems/minimum-operations-to-make-array-equal-to-target/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2066.5575759467,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3529. 统计水平子串和垂直子串重叠格子的数目",
                                    "summary": "",
                                    "src": "/count-cells-in-overlapping-horizontal-and-vertical-substrings/",
                                    "original_src": "https://leetcode.cn/problems/count-cells-in-overlapping-horizontal-and-vertical-substrings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2105.0143242092,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "798. 得分最高的最小轮调",
                                    "summary": "",
                                    "src": "/smallest-rotation-with-highest-score/",
                                    "original_src": "https://leetcode.cn/problems/smallest-rotation-with-highest-score/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2129.7051442916,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3347. 执行操作后元素的最高频率 II",
                                    "summary": "",
                                    "src": "/maximum-frequency-of-an-element-after-performing-operations-ii/",
                                    "original_src": "https://leetcode.cn/problems/maximum-frequency-of-an-element-after-performing-operations-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2155.599241516,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2528. 最大化城市的最小电量",
                                    "summary": "",
                                    "src": "/maximize-the-minimum-powered-city/",
                                    "original_src": "https://leetcode.cn/problems/maximize-the-minimum-powered-city/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2235.5784618885,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1674. 使数组互补的最少操作次数",
                                    "summary": "",
                                    "src": "/minimum-moves-to-make-array-complementary/",
                                    "original_src": "https://leetcode.cn/problems/minimum-moves-to-make-array-complementary/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2333.2401505813,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3362. 零数组变换 III",
                                    "summary": "",
                                    "src": "/zero-array-transformation-iii/",
                                    "original_src": "https://leetcode.cn/problems/zero-array-transformation-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2423.8553548566,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3017. 按距离统计房屋对数目 II",
                                    "summary": "",
                                    "src": "/count-the-number-of-houses-at-a-certain-distance-ii/",
                                    "original_src": "https://leetcode.cn/problems/count-the-number-of-houses-at-a-certain-distance-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2709.4067070911,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "253. 会议室 II",
                                    "summary": "",
                                    "src": "/meeting-rooms-ii/",
                                    "original_src": "https://leetcode.cn/problems/meeting-rooms-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "370. 区间加法",
                                    "summary": "",
                                    "src": "/range-addition/",
                                    "original_src": "https://leetcode.cn/problems/range-addition/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1989. 捉迷藏中可捕获的最大人数",
                                    "summary": "",
                                    "src": "/maximum-number-of-people-that-can-be-caught-in-tag/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-people-that-can-be-caught-in-tag/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "759. 员工空闲时间",
                                    "summary": "",
                                    "src": "/employee-free-time/",
                                    "original_src": "https://leetcode.cn/problems/employee-free-time/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1710.1120861153,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2021. 街上最亮的位置",
                                    "summary": "",
                                    "src": "/brightest-position-on-street/",
                                    "original_src": "https://leetcode.cn/problems/brightest-position-on-street/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2015. 每段建筑物的平均高度",
                                    "summary": "",
                                    "src": "/average-height-of-buildings-in-each-segment/",
                                    "original_src": "https://leetcode.cn/problems/average-height-of-buildings-in-each-segment/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2237. 计算街道上满足所需亮度的位置数量",
                                    "summary": "",
                                    "src": "/count-positions-on-street-with-required-brightness/",
                                    "original_src": "https://leetcode.cn/problems/count-positions-on-street-with-required-brightness/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "3009. 折线图上的最大交点数量",
                                    "summary": "",
                                    "src": "/maximum-number-of-intersections-on-the-chart/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-intersections-on-the-chart/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "3279. 活塞占据的最大总面积",
                                    "summary": "",
                                    "src": "/maximum-total-area-occupied-by-pistons/",
                                    "original_src": "https://leetcode.cn/problems/maximum-total-area-occupied-by-pistons/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§2.2 二维差分",
                            "summary": "<a href=\"https://leetcode.cn/problems/stamping-the-grid/solution/wu-nao-zuo-fa-er-wei-qian-zhui-he-er-wei-zwiu/\">【图解】从一维差分到二维差分</a><br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "2536. 子矩阵元素加 1",
                                    "summary": "",
                                    "src": "/increment-submatrices-by-one/",
                                    "original_src": "https://leetcode.cn/problems/increment-submatrices-by-one/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1583.3117784523,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "850. 矩形面积 II",
                                    "summary": "",
                                    "src": "/rectangle-area-ii/",
                                    "original_src": "https://leetcode.cn/problems/rectangle-area-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2235.9672341699,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2132. 用邮票贴满网格图",
                                    "summary": "",
                                    "src": "/stamping-the-grid/",
                                    "original_src": "https://leetcode.cn/problems/stamping-the-grid/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2364.3930657709,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "LCP 74. 最强祝福力场",
                                    "summary": "",
                                    "src": "/xepqZ5/",
                                    "original_src": "https://leetcode.cn/problems/xepqZ5/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "三、栈",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§3.1 基础",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1441. 用栈操作构建数组",
                                    "summary": "",
                                    "src": "/build-an-array-with-stack-operations/",
                                    "original_src": "https://leetcode.cn/problems/build-an-array-with-stack-operations/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1180.3543157775,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "844. 比较含退格的字符串",
                                    "summary": "",
                                    "src": "/backspace-string-compare/",
                                    "original_src": "https://leetcode.cn/problems/backspace-string-compare/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1227.7906887239,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "682. 棒球比赛",
                                    "summary": "",
                                    "src": "/baseball-game/",
                                    "original_src": "https://leetcode.cn/problems/baseball-game/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2390. 从字符串中移除星号",
                                    "summary": "",
                                    "src": "/removing-stars-from-a-string/",
                                    "original_src": "https://leetcode.cn/problems/removing-stars-from-a-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1347.8521638635,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1472. 设计浏览器历史记录",
                                    "summary": "",
                                    "src": "/design-browser-history/",
                                    "original_src": "https://leetcode.cn/problems/design-browser-history/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1453.7818053022,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "946. 验证栈序列",
                                    "summary": "",
                                    "src": "/validate-stack-sequences/",
                                    "original_src": "https://leetcode.cn/problems/validate-stack-sequences/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1461.9157715206,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3412. 计算字符串的镜像分数",
                                    "summary": "",
                                    "src": "/find-mirror-score-of-a-string/",
                                    "original_src": "https://leetcode.cn/problems/find-mirror-score-of-a-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1578.4458037997,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "71. 简化路径",
                                    "summary": "",
                                    "src": "/simplify-path/",
                                    "original_src": "https://leetcode.cn/problems/simplify-path/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§3.2 进阶",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "3170. 删除星号以后字典序最小的字符串",
                                    "summary": "",
                                    "src": "/lexicographically-minimum-string-after-removing-stars/",
                                    "original_src": "https://leetcode.cn/problems/lexicographically-minimum-string-after-removing-stars/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1772.4702293335,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "155. 最小栈",
                                    "summary": "",
                                    "src": "/min-stack/",
                                    "original_src": "https://leetcode.cn/problems/min-stack/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1381. 设计一个支持增量操作的栈",
                                    "summary": "",
                                    "src": "/design-a-stack-with-increment-operation/",
                                    "original_src": "https://leetcode.cn/problems/design-a-stack-with-increment-operation/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1285.9726675488,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "636. 函数的独占时间",
                                    "summary": "",
                                    "src": "/exclusive-time-of-functions/",
                                    "original_src": "https://leetcode.cn/problems/exclusive-time-of-functions/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2434. 使用机器人打印字典序最小的字符串",
                                    "summary": "",
                                    "src": "/using-a-robot-to-print-the-lexicographically-smallest-string/",
                                    "original_src": "https://leetcode.cn/problems/using-a-robot-to-print-the-lexicographically-smallest-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1953.137726744,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "895. 最大频率栈",
                                    "summary": "",
                                    "src": "/maximum-frequency-stack/",
                                    "original_src": "https://leetcode.cn/problems/maximum-frequency-stack/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2027.8772739639,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1172. 餐盘栈",
                                    "summary": "",
                                    "src": "/dinner-plate-stacks/",
                                    "original_src": "https://leetcode.cn/problems/dinner-plate-stacks/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2109.9830154953,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2589. 完成所有任务的最少时间",
                                    "summary": "",
                                    "src": "/minimum-time-to-complete-all-tasks/",
                                    "original_src": "https://leetcode.cn/problems/minimum-time-to-complete-all-tasks/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2380.5983169295,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "716. 最大栈",
                                    "summary": "",
                                    "src": "/max-stack/",
                                    "original_src": "https://leetcode.cn/problems/max-stack/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§3.3 邻项消除",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "2696. 删除子串后的字符串最小长度",
                                    "summary": "",
                                    "src": "/minimum-string-length-after-removing-substrings/",
                                    "original_src": "https://leetcode.cn/problems/minimum-string-length-after-removing-substrings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1282.3870247003,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1047. 删除字符串中的所有相邻重复项",
                                    "summary": "",
                                    "src": "/remove-all-adjacent-duplicates-in-string/",
                                    "original_src": "https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1286.3167937403,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1544. 整理字符串",
                                    "summary": "",
                                    "src": "/make-the-string-great/",
                                    "original_src": "https://leetcode.cn/problems/make-the-string-great/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1344.226133202,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3561. 移除相邻字符",
                                    "summary": "",
                                    "src": "/resulting-string-after-adjacent-removals/",
                                    "original_src": "https://leetcode.cn/problems/resulting-string-after-adjacent-removals/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1397.240044812,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1003. 检查替换后的词是否有效",
                                    "summary": "",
                                    "src": "/check-if-word-is-valid-after-substitutions/",
                                    "original_src": "https://leetcode.cn/problems/check-if-word-is-valid-after-substitutions/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1426.7144554733,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2216. 美化数组的最少删除数",
                                    "summary": "",
                                    "src": "/minimum-deletions-to-make-array-beautiful/",
                                    "original_src": "https://leetcode.cn/problems/minimum-deletions-to-make-array-beautiful/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1509.5562928491,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1209. 删除字符串中的所有相邻重复项 II",
                                    "summary": "",
                                    "src": "/remove-all-adjacent-duplicates-in-string-ii/",
                                    "original_src": "https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1541.5405749918,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "735. 小行星碰撞",
                                    "summary": "",
                                    "src": "/asteroid-collision/",
                                    "original_src": "https://leetcode.cn/problems/asteroid-collision/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1717. 删除子字符串的最大得分",
                                    "summary": "",
                                    "src": "/maximum-score-from-removing-substrings/",
                                    "original_src": "https://leetcode.cn/problems/maximum-score-from-removing-substrings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1867.9916069568,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2197. 替换数组中的非互质数",
                                    "summary": "",
                                    "src": "/replace-non-coprime-numbers-in-array/",
                                    "original_src": "https://leetcode.cn/problems/replace-non-coprime-numbers-in-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2057.4788263111,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2751. 机器人碰撞",
                                    "summary": "",
                                    "src": "/robot-collisions/",
                                    "original_src": "https://leetcode.cn/problems/robot-collisions/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2091.6474629767,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§3.4 合法括号字符串（RBS）",
                            "summary": "注：部分题目可以不用栈，而是用一个数字记录嵌套深度。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "20. 有效的括号",
                                    "summary": "",
                                    "src": "/valid-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/valid-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "921. 使括号有效的最少添加",
                                    "summary": "",
                                    "src": "/minimum-add-to-make-parentheses-valid/",
                                    "original_src": "https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1242.4710735813,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1021. 删除最外层的括号",
                                    "summary": "",
                                    "src": "/remove-outermost-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/remove-outermost-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1311.3495317884,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1614. 括号的最大嵌套深度",
                                    "summary": "",
                                    "src": "/maximum-nesting-depth-of-the-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/maximum-nesting-depth-of-the-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1322.8302750313,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1190. 反转每对括号间的子串",
                                    "summary": "",
                                    "src": "/reverse-substrings-between-each-pair-of-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/reverse-substrings-between-each-pair-of-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1485.6550472186,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "856. 括号的分数",
                                    "summary": "",
                                    "src": "/score-of-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/score-of-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1562.7212466716,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1249. 移除无效的括号",
                                    "summary": "",
                                    "src": "/minimum-remove-to-make-valid-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/minimum-remove-to-make-valid-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1657.1231739081,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1963. 使字符串平衡的最小交换次数",
                                    "summary": "",
                                    "src": "/minimum-number-of-swaps-to-make-the-string-balanced/",
                                    "original_src": "https://leetcode.cn/problems/minimum-number-of-swaps-to-make-the-string-balanced/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1688.9209684568,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "678. 有效的括号字符串",
                                    "summary": "",
                                    "src": "/valid-parenthesis-string/",
                                    "original_src": "https://leetcode.cn/problems/valid-parenthesis-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1111. 有效括号的嵌套深度",
                                    "summary": "",
                                    "src": "/maximum-nesting-depth-of-two-valid-parentheses-strings/",
                                    "original_src": "https://leetcode.cn/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1749.4981778209,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1541. 平衡括号字符串的最少插入次数",
                                    "summary": "",
                                    "src": "/minimum-insertions-to-balance-a-parentheses-string/",
                                    "original_src": "https://leetcode.cn/problems/minimum-insertions-to-balance-a-parentheses-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1759.0197295594,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2116. 判断一个括号字符串是否有效",
                                    "summary": "",
                                    "src": "/check-if-a-parentheses-string-can-be-valid/",
                                    "original_src": "https://leetcode.cn/problems/check-if-a-parentheses-string-can-be-valid/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2037.6527962599,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "32. 最长有效括号",
                                    "summary": "",
                                    "src": "/longest-valid-parentheses/",
                                    "original_src": "https://leetcode.cn/problems/longest-valid-parentheses/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§3.5 表达式解析",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1006. 笨阶乘",
                                    "summary": "",
                                    "src": "/clumsy-factorial/",
                                    "original_src": "https://leetcode.cn/problems/clumsy-factorial/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1407.9870845299,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "150. 逆波兰表达式求值",
                                    "summary": "",
                                    "src": "/evaluate-reverse-polish-notation/",
                                    "original_src": "https://leetcode.cn/problems/evaluate-reverse-polish-notation/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "394. 字符串解码",
                                    "summary": "",
                                    "src": "/decode-string/",
                                    "original_src": "https://leetcode.cn/problems/decode-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "224. 基本计算器",
                                    "summary": "",
                                    "src": "/basic-calculator/",
                                    "original_src": "https://leetcode.cn/problems/basic-calculator/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "227. 基本计算器 II",
                                    "summary": "",
                                    "src": "/basic-calculator-ii/",
                                    "original_src": "https://leetcode.cn/problems/basic-calculator-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "726. 原子的数量",
                                    "summary": "",
                                    "src": "/number-of-atoms/",
                                    "original_src": "https://leetcode.cn/problems/number-of-atoms/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1106. 解析布尔表达式",
                                    "summary": "",
                                    "src": "/parsing-a-boolean-expression/",
                                    "original_src": "https://leetcode.cn/problems/parsing-a-boolean-expression/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1880.4226853663,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "591. 标签验证器",
                                    "summary": "",
                                    "src": "/tag-validator/",
                                    "original_src": "https://leetcode.cn/problems/tag-validator/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "736. Lisp 语法解析",
                                    "summary": "",
                                    "src": "/parse-lisp-expression/",
                                    "original_src": "https://leetcode.cn/problems/parse-lisp-expression/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1096. 花括号展开 II",
                                    "summary": "",
                                    "src": "/brace-expansion-ii/",
                                    "original_src": "https://leetcode.cn/problems/brace-expansion-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2348.5159376523,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1896. 反转表达式值的最少操作次数",
                                    "summary": "",
                                    "src": "/minimum-cost-to-change-the-final-value-of-expression/",
                                    "original_src": "https://leetcode.cn/problems/minimum-cost-to-change-the-final-value-of-expression/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2531.6452775023,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "770. 基本计算器 IV",
                                    "summary": "",
                                    "src": "/basic-calculator-iv/",
                                    "original_src": "https://leetcode.cn/problems/basic-calculator-iv/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2863.1378294349,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "439. 三元表达式解析器",
                                    "summary": "",
                                    "src": "/ternary-expression-parser/",
                                    "original_src": "https://leetcode.cn/problems/ternary-expression-parser/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "772. 基本计算器 III",
                                    "summary": "",
                                    "src": "/basic-calculator-iii/",
                                    "original_src": "https://leetcode.cn/problems/basic-calculator-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1087. 花括号展开",
                                    "summary": "",
                                    "src": "/brace-expansion/",
                                    "original_src": "https://leetcode.cn/problems/brace-expansion/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1480.1116248664,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1597. 根据中缀表达式构造二叉表达式树",
                                    "summary": "",
                                    "src": "/build-binary-expression-tree-from-infix-expression/",
                                    "original_src": "https://leetcode.cn/problems/build-binary-expression-tree-from-infix-expression/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1628. 设计带解析函数的表达式树",
                                    "summary": "",
                                    "src": "/design-an-expression-tree-with-evaluate-function/",
                                    "original_src": "https://leetcode.cn/problems/design-an-expression-tree-with-evaluate-function/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§3.6 对顶栈",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "2296. 设计一个文本编辑器",
                                    "summary": "",
                                    "src": "/design-a-text-editor/",
                                    "original_src": "https://leetcode.cn/problems/design-a-text-editor/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1911.8282317986,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§3.7 单调栈",
                            "summary": "见 <a href=\"/lc-rating/list/monotonic_stack\">单调栈题单</a>。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "四、队列",
                    "summary": "队列常用在 BFS 中，见 <a href=\"/lc-rating/list/grid\">网格图题单</a> 和 <a href=\"/lc-rating/list/graph\">图论题单</a>。与此相比，栈常用在 DFS 中，但无需我们手动维护。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§4.1 基础",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "933. 最近的请求次数",
                                    "summary": "",
                                    "src": "/number-of-recent-calls/",
                                    "original_src": "https://leetcode.cn/problems/number-of-recent-calls/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1337.8472367494,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "950. 按递增顺序显示卡牌",
                                    "summary": "",
                                    "src": "/reveal-cards-in-increasing-order/",
                                    "original_src": "https://leetcode.cn/problems/reveal-cards-in-increasing-order/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1686.4493679523,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "649. Dota2 参议院",
                                    "summary": "",
                                    "src": "/dota2-senate/",
                                    "original_src": "https://leetcode.cn/problems/dota2-senate/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "346. 数据流中的移动平均值",
                                    "summary": "",
                                    "src": "/moving-average-from-data-stream/",
                                    "original_src": "https://leetcode.cn/problems/moving-average-from-data-stream/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "362. 敲击计数器",
                                    "summary": "",
                                    "src": "/design-hit-counter/",
                                    "original_src": "https://leetcode.cn/problems/design-hit-counter/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "379. 电话目录管理系统",
                                    "summary": "",
                                    "src": "/design-phone-directory/",
                                    "original_src": "https://leetcode.cn/problems/design-phone-directory/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1429. 第一个唯一数字",
                                    "summary": "",
                                    "src": "/first-unique-number/",
                                    "original_src": "https://leetcode.cn/problems/first-unique-number/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2534. 通过门的时间",
                                    "summary": "",
                                    "src": "/time-taken-to-cross-the-door/",
                                    "original_src": "https://leetcode.cn/problems/time-taken-to-cross-the-door/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§4.2 设计",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1670. 设计前中后队列",
                                    "summary": "",
                                    "src": "/design-front-middle-back-queue/",
                                    "original_src": "https://leetcode.cn/problems/design-front-middle-back-queue/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1610.1866391145,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3508. 设计路由器",
                                    "summary": "",
                                    "src": "/implement-router/",
                                    "original_src": "https://leetcode.cn/problems/implement-router/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1851.1720518145,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "225. 用队列实现栈",
                                    "summary": "",
                                    "src": "/implement-stack-using-queues/",
                                    "original_src": "https://leetcode.cn/problems/implement-stack-using-queues/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "232. 用栈实现队列",
                                    "summary": "",
                                    "src": "/implement-queue-using-stacks/",
                                    "original_src": "https://leetcode.cn/problems/implement-queue-using-stacks/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "622. 设计循环队列",
                                    "summary": "",
                                    "src": "/design-circular-queue/",
                                    "original_src": "https://leetcode.cn/problems/design-circular-queue/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "641. 设计循环双端队列",
                                    "summary": "",
                                    "src": "/design-circular-deque/",
                                    "original_src": "https://leetcode.cn/problems/design-circular-deque/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§4.3 双端队列",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "2810. 故障键盘",
                                    "summary": "",
                                    "src": "/faulty-keyboard/",
                                    "original_src": "https://leetcode.cn/problems/faulty-keyboard/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1192.9770230345,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2071. 你可以安排的最多任务数目",
                                    "summary": "",
                                    "src": "/maximum-number-of-tasks-you-can-assign/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-tasks-you-can-assign/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2648.1748409542,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§4.4 单调队列",
                            "summary": "个人觉得叫**单调双端队列**更准确。<br>**单调队列 = 滑动窗口 + 单调栈**。必须先掌握滑动窗口和单调栈这两个知识点，再学单调队列。<br>**问**：入队、出队、更新答案，这三步的顺序如何思考？<br>**答**：有两种情况。如果更新答案时，用到的数据包含当前元素，那么就需要先入队，再更新答案；如果用到的数据不包含当前元素，那么就需要先更新答案，再入队。至于出队，一般写在前面，每遍历到一个新的元素，就看看队首元素是否失效（不满足要求），失效则弹出队首。<br><a href=\"https://www.bilibili.com/video/BV1bM411X72E/\">原理讲解</a><br>关于单调队列优化 DP，见 <a href=\"/lc-rating/list/dynamic_programming\">动态规划题单</a> 中的「§11.3 单调队列优化 DP」。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "239. 滑动窗口最大值",
                                    "summary": "",
                                    "src": "/sliding-window-maximum/",
                                    "original_src": "https://leetcode.cn/problems/sliding-window-maximum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "LCR 184. 设计自助结算系统",
                                    "summary": "",
                                    "src": "/dui-lie-de-zui-da-zhi-lcof/",
                                    "original_src": "https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1438. 绝对差不超过限制的最长连续子数组",
                                    "summary": "",
                                    "src": "/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/",
                                    "original_src": "https://leetcode.cn/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1672.1678031263,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2762. 不间断子数组",
                                    "summary": "",
                                    "src": "/continuous-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/continuous-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1940.2116985812,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2398. 预算内的最多机器人数目",
                                    "summary": "",
                                    "src": "/maximum-number-of-robots-within-budget/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-robots-within-budget/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1917.2145829853,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3589. 计数质数间隔平衡子数组",
                                    "summary": "",
                                    "src": "/count-prime-gap-balanced-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/count-prime-gap-balanced-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "862. 和至少为 K 的最短子数组",
                                    "summary": "",
                                    "src": "/shortest-subarray-with-sum-at-least-k/",
                                    "original_src": "https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2306.8472649456,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1499. 满足不等式的最大值",
                                    "summary": "",
                                    "src": "/max-value-of-equation/",
                                    "original_src": "https://leetcode.cn/problems/max-value-of-equation/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2456.3900212097,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "五、堆（优先队列）",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§5.1 基础",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "1046. 最后一块石头的重量",
                                    "summary": "",
                                    "src": "/last-stone-weight/",
                                    "original_src": "https://leetcode.cn/problems/last-stone-weight/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1172.6819789183,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3264. K 次乘运算后的最终数组 I",
                                    "summary": "",
                                    "src": "/final-array-state-after-k-multiplication-operations-i/",
                                    "original_src": "https://leetcode.cn/problems/final-array-state-after-k-multiplication-operations-i/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1177.5447304844,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2558. 从数量最多的堆取走礼物",
                                    "summary": "",
                                    "src": "/take-gifts-from-the-richest-pile/",
                                    "original_src": "https://leetcode.cn/problems/take-gifts-from-the-richest-pile/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1276.7817742915,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2336. 无限集中的最小数字",
                                    "summary": "",
                                    "src": "/smallest-number-in-infinite-set/",
                                    "original_src": "https://leetcode.cn/problems/smallest-number-in-infinite-set/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1375.0376362104,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2530. 执行 K 次操作后的最大分数",
                                    "summary": "",
                                    "src": "/maximal-score-after-applying-k-operations/",
                                    "original_src": "https://leetcode.cn/problems/maximal-score-after-applying-k-operations/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1386.1200017827,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3066. 超过阈值的最少操作数 II",
                                    "summary": "",
                                    "src": "/minimum-operations-to-exceed-threshold-value-ii/",
                                    "original_src": "https://leetcode.cn/problems/minimum-operations-to-exceed-threshold-value-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1399.5303229631,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1962. 移除石子使总数最小",
                                    "summary": "",
                                    "src": "/remove-stones-to-minimize-the-total/",
                                    "original_src": "https://leetcode.cn/problems/remove-stones-to-minimize-the-total/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1418.6847740057,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "703. 数据流中的第 K 大元素",
                                    "summary": "",
                                    "src": "/kth-largest-element-in-a-stream/",
                                    "original_src": "https://leetcode.cn/problems/kth-largest-element-in-a-stream/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3275. 第 K 近障碍物查询",
                                    "summary": "",
                                    "src": "/k-th-nearest-obstacle-queries/",
                                    "original_src": "https://leetcode.cn/problems/k-th-nearest-obstacle-queries/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1419.6326908404,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1845. 座位预约管理系统",
                                    "summary": "",
                                    "src": "/seat-reservation-manager/",
                                    "original_src": "https://leetcode.cn/problems/seat-reservation-manager/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1428.6729861424,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2208. 将数组和减半的最少操作次数",
                                    "summary": "",
                                    "src": "/minimum-operations-to-halve-array-sum/",
                                    "original_src": "https://leetcode.cn/problems/minimum-operations-to-halve-array-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1550.0978082682,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2233. K 次增加后的最大乘积",
                                    "summary": "",
                                    "src": "/maximum-product-after-k-increments/",
                                    "original_src": "https://leetcode.cn/problems/maximum-product-after-k-increments/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1685.5389350949,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3296. 移山所需的最少秒数",
                                    "summary": "",
                                    "src": "/minimum-number-of-seconds-to-make-mountain-height-zero/",
                                    "original_src": "https://leetcode.cn/problems/minimum-number-of-seconds-to-make-mountain-height-zero/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1694.7320914942,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1942. 最小未被占据椅子的编号",
                                    "summary": "",
                                    "src": "/the-number-of-the-smallest-unoccupied-chair/",
                                    "original_src": "https://leetcode.cn/problems/the-number-of-the-smallest-unoccupied-chair/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1695.2832486322,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1801. 积压订单中的订单总数",
                                    "summary": "",
                                    "src": "/number-of-orders-in-the-backlog/",
                                    "original_src": "https://leetcode.cn/problems/number-of-orders-in-the-backlog/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1711.1205064321,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2406. 将区间分为最少组数",
                                    "summary": "",
                                    "src": "/divide-intervals-into-minimum-number-of-groups/",
                                    "original_src": "https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1713.3954468582,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3478. 选出和最大的 K 个元素",
                                    "summary": "",
                                    "src": "/choose-k-elements-with-maximum-sum/",
                                    "original_src": "https://leetcode.cn/problems/choose-k-elements-with-maximum-sum/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1753.278205425,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2462. 雇佣 K 位工人的总代价",
                                    "summary": "",
                                    "src": "/total-cost-to-hire-k-workers/",
                                    "original_src": "https://leetcode.cn/problems/total-cost-to-hire-k-workers/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1763.6404758359,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1834. 单线程 CPU",
                                    "summary": "",
                                    "src": "/single-threaded-cpu/",
                                    "original_src": "https://leetcode.cn/problems/single-threaded-cpu/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1797.7466000366,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1792. 最大平均通过率",
                                    "summary": "",
                                    "src": "/maximum-average-pass-ratio/",
                                    "original_src": "https://leetcode.cn/problems/maximum-average-pass-ratio/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1817.9978644712,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2931. 购买物品的最大开销",
                                    "summary": "",
                                    "src": "/maximum-spending-after-buying-items/",
                                    "original_src": "https://leetcode.cn/problems/maximum-spending-after-buying-items/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1822.3170524016,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1882. 使用服务器处理任务",
                                    "summary": "",
                                    "src": "/process-tasks-using-servers/",
                                    "original_src": "https://leetcode.cn/problems/process-tasks-using-servers/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1979.1112273597,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2402. 会议室 III",
                                    "summary": "",
                                    "src": "/meeting-rooms-iii/",
                                    "original_src": "https://leetcode.cn/problems/meeting-rooms-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2092.8943149547,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "253. 会议室 II",
                                    "summary": "",
                                    "src": "/meeting-rooms-ii/",
                                    "original_src": "https://leetcode.cn/problems/meeting-rooms-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1167. 连接木棍的最低费用",
                                    "summary": "",
                                    "src": "/minimum-cost-to-connect-sticks/",
                                    "original_src": "https://leetcode.cn/problems/minimum-cost-to-connect-sticks/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1481.5701319876,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§5.2 进阶",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "23. 合并 K 个升序链表",
                                    "summary": "",
                                    "src": "/merge-k-sorted-lists/",
                                    "original_src": "https://leetcode.cn/problems/merge-k-sorted-lists/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "355. 设计推特",
                                    "summary": "",
                                    "src": "/design-twitter/",
                                    "original_src": "https://leetcode.cn/problems/design-twitter/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "502. IPO",
                                    "summary": "",
                                    "src": "/ipo/",
                                    "original_src": "https://leetcode.cn/problems/ipo/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1705. 吃苹果的最大数目",
                                    "summary": "",
                                    "src": "/maximum-number-of-eaten-apples/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-eaten-apples/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1929.9086934334,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "778. 水位上升的泳池中游泳",
                                    "summary": "",
                                    "src": "/swim-in-rising-water/",
                                    "original_src": "https://leetcode.cn/problems/swim-in-rising-water/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2096.6201393558,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1631. 最小体力消耗路径",
                                    "summary": "",
                                    "src": "/path-with-minimum-effort/",
                                    "original_src": "https://leetcode.cn/problems/path-with-minimum-effort/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1947.5013967785,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1354. 多次求和构造目标数组",
                                    "summary": "",
                                    "src": "/construct-target-array-with-multiple-sums/",
                                    "original_src": "https://leetcode.cn/problems/construct-target-array-with-multiple-sums/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2014.7655493665,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1353. 最多可以参加的会议数目",
                                    "summary": "",
                                    "src": "/maximum-number-of-events-that-can-be-attended/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2015.7291888336,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1235. 规划兼职工作",
                                    "summary": "",
                                    "src": "/maximum-profit-in-job-scheduling/",
                                    "original_src": "https://leetcode.cn/problems/maximum-profit-in-job-scheduling/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2022.8520613737,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "632. 最小区间",
                                    "summary": "",
                                    "src": "/smallest-range-covering-elements-from-k-lists/",
                                    "original_src": "https://leetcode.cn/problems/smallest-range-covering-elements-from-k-lists/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2542. 最大子序列的分数",
                                    "summary": "",
                                    "src": "/maximum-subsequence-score/",
                                    "original_src": "https://leetcode.cn/problems/maximum-subsequence-score/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2056.2598215101,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1383. 最大的团队表现值",
                                    "summary": "",
                                    "src": "/maximum-performance-of-a-team/",
                                    "original_src": "https://leetcode.cn/problems/maximum-performance-of-a-team/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2091.3820373571,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2503. 矩阵查询可获得的最大分数",
                                    "summary": "",
                                    "src": "/maximum-number-of-points-from-grid-queries/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2195.6540241654,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2163. 删除元素后和的最小差值",
                                    "summary": "",
                                    "src": "/minimum-difference-in-sums-after-removal-of-elements/",
                                    "original_src": "https://leetcode.cn/problems/minimum-difference-in-sums-after-removal-of-elements/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2225.3877535768,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "857. 雇佣 K 名工人的最低成本",
                                    "summary": "",
                                    "src": "/minimum-cost-to-hire-k-workers/",
                                    "original_src": "https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2259.6572191969,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1606. 找到处理最多请求的服务器",
                                    "summary": "",
                                    "src": "/find-servers-that-handled-most-number-of-requests/",
                                    "original_src": "https://leetcode.cn/problems/find-servers-that-handled-most-number-of-requests/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2275.7337818748,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1851. 包含每个查询的最小区间",
                                    "summary": "",
                                    "src": "/minimum-interval-to-include-each-query/",
                                    "original_src": "https://leetcode.cn/problems/minimum-interval-to-include-each-query/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2286.1378742318,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "218. 天际线问题",
                                    "summary": "",
                                    "src": "/the-skyline-problem/",
                                    "original_src": "https://leetcode.cn/problems/the-skyline-problem/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "407. 接雨水 II",
                                    "summary": "",
                                    "src": "/trapping-rain-water-ii/",
                                    "original_src": "https://leetcode.cn/problems/trapping-rain-water-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2940. 找到 Alice 和 Bob 可以相遇的建筑",
                                    "summary": "",
                                    "src": "/find-building-where-alice-and-bob-can-meet/",
                                    "original_src": "https://leetcode.cn/problems/find-building-where-alice-and-bob-can-meet/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2327.4743300299,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3399. 字符相同的最短子字符串 II",
                                    "summary": "",
                                    "src": "/smallest-substring-with-identical-characters-ii/",
                                    "original_src": "https://leetcode.cn/problems/smallest-substring-with-identical-characters-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2375.9062896615,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2589. 完成所有任务的最少时间",
                                    "summary": "",
                                    "src": "/minimum-time-to-complete-all-tasks/",
                                    "original_src": "https://leetcode.cn/problems/minimum-time-to-complete-all-tasks/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2380.5983169295,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3266. K 次乘运算后的最终数组 II",
                                    "summary": "",
                                    "src": "/final-array-state-after-k-multiplication-operations-ii/",
                                    "original_src": "https://leetcode.cn/problems/final-array-state-after-k-multiplication-operations-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2508.6766880695,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1675. 数组的最小偏移量",
                                    "summary": "",
                                    "src": "/minimize-deviation-in-array/",
                                    "original_src": "https://leetcode.cn/problems/minimize-deviation-in-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2533.3027905062,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2617. 网格图中最少访问的格子数",
                                    "summary": "",
                                    "src": "/minimum-number-of-visited-cells-in-a-grid/",
                                    "original_src": "https://leetcode.cn/problems/minimum-number-of-visited-cells-in-a-grid/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2581.9961985753,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2532. 过桥的时间",
                                    "summary": "",
                                    "src": "/time-to-cross-a-bridge/",
                                    "original_src": "https://leetcode.cn/problems/time-to-cross-a-bridge/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2588.8752130913,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "LCP 33. 蓄水",
                                    "summary": "",
                                    "src": "/o8SXZn/",
                                    "original_src": "https://leetcode.cn/problems/o8SXZn/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1199. 建造街区的最短时间",
                                    "summary": "",
                                    "src": "/minimum-time-to-build-blocks/",
                                    "original_src": "https://leetcode.cn/problems/minimum-time-to-build-blocks/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2250.2578740769,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "3506. 查找消除细菌菌株所需时间 II",
                                    "summary": "",
                                    "src": "/find-time-required-to-eliminate-bacterial-strains-ii/",
                                    "original_src": "https://leetcode.cn/problems/find-time-required-to-eliminate-bacterial-strains-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§5.3 重排元素",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "984. 不含 AAA 或 BBB 的字符串",
                                    "summary": "",
                                    "src": "/string-without-aaa-or-bbb/",
                                    "original_src": "https://leetcode.cn/problems/string-without-aaa-or-bbb/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1474.0150725665,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "767. 重构字符串",
                                    "summary": "",
                                    "src": "/reorganize-string/",
                                    "original_src": "https://leetcode.cn/problems/reorganize-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1681.3263732456,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1054. 距离相等的条形码",
                                    "summary": "",
                                    "src": "/distant-barcodes/",
                                    "original_src": "https://leetcode.cn/problems/distant-barcodes/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1701.5735371897,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1953. 你可以工作的最大周数",
                                    "summary": "",
                                    "src": "/maximum-number-of-weeks-for-which-you-can-work/",
                                    "original_src": "https://leetcode.cn/problems/maximum-number-of-weeks-for-which-you-can-work/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1803.7518552874,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1405. 最长快乐字符串",
                                    "summary": "",
                                    "src": "/longest-happy-string/",
                                    "original_src": "https://leetcode.cn/problems/longest-happy-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1820.58557644,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3081. 替换字符串中的问号使分数最小",
                                    "summary": "",
                                    "src": "/replace-question-marks-in-string-to-minimize-its-value/",
                                    "original_src": "https://leetcode.cn/problems/replace-question-marks-in-string-to-minimize-its-value/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1904.6714229335,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "621. 任务调度器",
                                    "summary": "",
                                    "src": "/task-scheduler/",
                                    "original_src": "https://leetcode.cn/problems/task-scheduler/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "358. K 距离间隔重排字符串",
                                    "summary": "",
                                    "src": "/rearrange-string-k-distance-apart/",
                                    "original_src": "https://leetcode.cn/problems/rearrange-string-k-distance-apart/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§5.4 第 K 小/大",
                            "summary": "部分题目也可以用二分解决。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "264. 丑数 II",
                                    "summary": "",
                                    "src": "/ugly-number-ii/",
                                    "original_src": "https://leetcode.cn/problems/ugly-number-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "378. 有序矩阵中第 K 小的元素",
                                    "summary": "",
                                    "src": "/kth-smallest-element-in-a-sorted-matrix/",
                                    "original_src": "https://leetcode.cn/problems/kth-smallest-element-in-a-sorted-matrix/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "373. 查找和最小的 K 对数字",
                                    "summary": "",
                                    "src": "/find-k-pairs-with-smallest-sums/",
                                    "original_src": "https://leetcode.cn/problems/find-k-pairs-with-smallest-sums/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1439. 有序矩阵中的第 k 个最小数组和",
                                    "summary": "",
                                    "src": "/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/",
                                    "original_src": "https://leetcode.cn/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2133.9592509012,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "786. 第 K 个最小的质数分数",
                                    "summary": "",
                                    "src": "/k-th-smallest-prime-fraction/",
                                    "original_src": "https://leetcode.cn/problems/k-th-smallest-prime-fraction/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2168.7531235448,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2386. 找出数组的第 K 大和",
                                    "summary": "",
                                    "src": "/find-the-k-sum-of-an-array/",
                                    "original_src": "https://leetcode.cn/problems/find-the-k-sum-of-an-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2647.8258771458,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§5.5 反悔堆",
                            "summary": "基于堆的反悔贪心。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "LCP 30. 魔塔游戏",
                                    "summary": "",
                                    "src": "/p0NxJO/",
                                    "original_src": "https://leetcode.cn/problems/p0NxJO/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1642. 可以到达的最远建筑",
                                    "summary": "",
                                    "src": "/furthest-building-you-can-reach/",
                                    "original_src": "https://leetcode.cn/problems/furthest-building-you-can-reach/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1962.2005269503,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "630. 课程表 III",
                                    "summary": "",
                                    "src": "/course-schedule-iii/",
                                    "original_src": "https://leetcode.cn/problems/course-schedule-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "871. 最低加油次数",
                                    "summary": "",
                                    "src": "/minimum-number-of-refueling-stops/",
                                    "original_src": "https://leetcode.cn/problems/minimum-number-of-refueling-stops/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2074.4120526679,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3362. 零数组变换 III",
                                    "summary": "",
                                    "src": "/zero-array-transformation-iii/",
                                    "original_src": "https://leetcode.cn/problems/zero-array-transformation-iii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2423.8553548566,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2813. 子序列最大优雅度",
                                    "summary": "",
                                    "src": "/maximum-elegance-of-a-k-length-subsequence/",
                                    "original_src": "https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2582.0814855506,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3049. 标记所有下标的最早秒数 II",
                                    "summary": "",
                                    "src": "/earliest-second-to-mark-indices-ii/",
                                    "original_src": "https://leetcode.cn/problems/earliest-second-to-mark-indices-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 3111.1274320356,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2599. 使前缀和数组非负",
                                    "summary": "",
                                    "src": "/make-the-prefix-sum-non-negative/",
                                    "original_src": "https://leetcode.cn/problems/make-the-prefix-sum-non-negative/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§5.6 懒删除堆",
                            "summary": "支持删除堆中任意元素。<br>模板：<br>```py [sol-Python3]<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "入堆",
            "summary": "class LazyHeap:<br>def __init__(self):<br>self.heap = []  # 最小堆（最大堆可以把数字取反或重载 __lt__）<br>self.remove_cnt = defaultdict(int)  # 每个元素剩余需要删除的次数<br>self.size = 0  # 堆的实际大小<br>def remove(self, x: Any) -> None:<br>self.remove_cnt[x] += 1  # 懒删除<br>self.size -= 1<br>def _apply_remove(self) -> None:<br>while self.heap and self.remove_cnt[self.heap[0]] > 0:<br>self.remove_cnt[self.heap[0]] -= 1<br>heappop(self.heap)<br>def top(self) -> Any:<br>self._apply_remove()<br>return self.heap[0]  # 真正的堆顶<br>def pop(self) -> Any:<br>self._apply_remove()<br>self.size -= 1<br>return heappop(self.heap)<br>def push(self, x: Any) -> None:<br>if self.remove_cnt[x] > 0:<br>self.remove_cnt[x] -= 1  # 抵消之前的删除<br>else:<br>heappush(self.heap, x)<br>self.size += 1<br>```<br>```java [sol-Java]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 最小堆 LazyHeap minPQ = new LazyHeap(Integer::compare);<br>// 最大堆 LazyHeap maxPQ = new LazyHeap((a, b) -> Integer.compare(b, a));<br>class LazyHeap extends PriorityQueue<Integer> {<br>private final Map<Integer, Integer> removeCnt = new HashMap<>(); // 每个元素剩余需要删除的次数<br>private int size = 0; // 堆的实际大小<br>public LazyHeap(Comparator<Integer> comparator) {<br>super(comparator);<br>}<br>// 删除堆中所有应该删除的元素后，堆的实际大小<br>public int size() {<br>return size;<br>}<br>// 删除<br>public void remove(int x) {<br>removeCnt.merge(x, 1, Integer::sum); // 懒删除<br>size--;<br>}<br>// 正式执行删除操作<br>private void applyRemove() {<br>while (removeCnt.getOrDefault(peek(), 0) > 0) {<br>removeCnt.merge(poll(), -1, Integer::sum);<br>}<br>}<br>// 查看堆顶<br>public int top() {<br>applyRemove();<br>return peek(); // 真正的堆顶<br>}<br>// 出堆<br>public int pop() {<br>applyRemove();<br>size--;<br>return poll();<br>}<br>// 入堆<br>public void push(int x) {<br>int c = removeCnt.getOrDefault(x, 0);<br>if (c > 0) {<br>removeCnt.put(x, c - 1); // 抵消之前的删除<br>} else {<br>offer(x);<br>}<br>size++;<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 最大堆 LazyHeap<int> max_pq;<br>// 最小堆 LazyHeap<int, greater<int>> min_pq;<br>template<typename T, typename Compare = less<T>><br>class LazyHeap {<br>priority_queue<T, vector<T>, Compare> pq;<br>unordered_map<T, int> remove_cnt; // 每个元素剩余需要删除的次数<br>size_t sz = 0; // 堆的实际大小<br>// 正式执行删除操作<br>void apply_remove() {<br>while (!pq.empty() && remove_cnt[pq.top()] > 0) {<br>remove_cnt[pq.top()]--;<br>pq.pop();<br>}<br>}<br>public:<br>// 删除堆中所有应该删除的元素后，堆的实际大小<br>size_t size() {<br>return sz;<br>}<br>// 删除<br>void remove(T x) {<br>remove_cnt[x]++; // 懒删除<br>sz--;<br>}<br>// 查看堆顶<br>T top() {<br>apply_remove();<br>return pq.top(); // 真正的堆顶<br>}<br>// 出堆<br>T pop() {<br>apply_remove();<br>sz--;<br>T x = pq.top();<br>pq.pop();<br>return x;<br>}<br>// 入堆<br>void push(T x) {<br>if (remove_cnt[x] > 0) {<br>remove_cnt[x]--; // 抵消之前的删除<br>} else {<br>pq.push(x);<br>}<br>sz++;<br>}<br>};<br>```<br>```go [sol-Go]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>func newLazyHeap() *lazyHeap {<br>return &lazyHeap{removeCnt: map[int]int{}}<br>}<br>// 懒删除堆（默认是最小堆）<br>type lazyHeap struct {<br>sort.IntSlice<br>removeCnt map[int]int // 每个元素剩余需要删除的次数<br>size      int         // 堆的实际大小<br>}<br>// 必须实现的两个接口<br>func (h *lazyHeap) Push(v any) { h.IntSlice = append(h.IntSlice, v.(int)) }<br>func (h *lazyHeap) Pop() any   { a := h.IntSlice; v := a[len(a)-1]; h.IntSlice = a[:len(a)-1]; return v }<br>// 加上这行变成最大堆<br>// func (h *lazyHeap) Less(i, j int) bool { return h.IntSlice[i] > h.IntSlice[j] }<br>// 删除<br>func (h *lazyHeap) remove(v int) {<br>h.removeCnt[v]++ // 懒删除<br>h.size--<br>}<br>// 正式执行删除操作<br>func (h *lazyHeap) applyRemove() {<br>for h.removeCnt[h.IntSlice[0]] > 0 {<br>h.removeCnt[h.IntSlice[0]]--<br>heap.Pop(h)<br>}<br>}<br>// 查看堆顶<br>func (h *lazyHeap) top() int {<br>h.applyRemove()<br>return h.IntSlice[0] // 真正的堆顶<br>}<br>// 出堆<br>func (h *lazyHeap) pop() int {<br>h.applyRemove()<br>h.size--<br>return heap.Pop(h).(int)<br>}<br>// 入堆<br>func (h *lazyHeap) push(v int) {<br>if h.removeCnt[v] > 0 {<br>h.removeCnt[v]-- // 抵消之前的删除<br>} else {<br>heap.Push(h, v)<br>}<br>h.size++<br>}<br>```<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [
                {
                    "title": "2349. 设计数字容器系统",
                    "summary": "",
                    "src": "/design-a-number-container-system/",
                    "original_src": "https://leetcode.cn/problems/design-a-number-container-system/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1540.2351411176,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3607. 电网维护",
                    "summary": "",
                    "src": "/power-grid-maintenance/",
                    "original_src": "https://leetcode.cn/problems/power-grid-maintenance/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2353. 设计食物评分系统",
                    "summary": "",
                    "src": "/design-a-food-rating-system/",
                    "original_src": "https://leetcode.cn/problems/design-a-food-rating-system/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1781.8156963676,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3092. 最高频率的 ID",
                    "summary": "",
                    "src": "/most-frequent-ids/",
                    "original_src": "https://leetcode.cn/problems/most-frequent-ids/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1793.1160019698,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3408. 设计任务管理器",
                    "summary": "",
                    "src": "/design-task-manager/",
                    "original_src": "https://leetcode.cn/problems/design-task-manager/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1806.5135130091,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2034. 股票价格波动",
                    "summary": "",
                    "src": "/stock-price-fluctuation/",
                    "original_src": "https://leetcode.cn/problems/stock-price-fluctuation/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1831.9395911303,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1172. 餐盘栈",
                    "summary": "",
                    "src": "/dinner-plate-stacks/",
                    "original_src": "https://leetcode.cn/problems/dinner-plate-stacks/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2109.9830154953,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3510. 移除最小数对使数组有序 II",
                    "summary": "",
                    "src": "/minimum-pair-removal-to-sort-array-ii/",
                    "original_src": "https://leetcode.cn/problems/minimum-pair-removal-to-sort-array-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2608.014730401,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3391. 设计一个高效的层跟踪三维二进制矩阵",
                    "summary": "",
                    "src": "/design-a-3d-binary-matrix-with-efficient-layer-tracking/",
                    "original_src": "https://leetcode.cn/problems/design-a-3d-binary-matrix-with-efficient-layer-tracking/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                }
            ],
            "nonLeafChild": [
                {
                    "title": "§5.7 对顶堆（滑动窗口第 K 小/大）",
                    "summary": "<a href=\"https://leetcode.cn/problems/find-median-from-data-stream/solutions/3015873/ru-he-zi-ran-yin-ru-da-xiao-dui-jian-ji-4v22k/\">讲解</a><br>部分题目需要结合懒删除堆。<br>另见 <a href=\"/lc-rating/list/graph\">图论题单</a> 中的 Dijkstra 算法。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "2102. 序列顺序查询",
                            "summary": "",
                            "src": "/sequentially-ordinal-rank-tracker/",
                            "original_src": "https://leetcode.cn/problems/sequentially-ordinal-rank-tracker/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2158.7683843245,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "295. 数据流的中位数",
                            "summary": "",
                            "src": "/find-median-from-data-stream/",
                            "original_src": "https://leetcode.cn/problems/find-median-from-data-stream/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "480. 滑动窗口中位数",
                            "summary": "",
                            "src": "/sliding-window-median/",
                            "original_src": "https://leetcode.cn/problems/sliding-window-median/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1825. 求出 MK 平均值",
                            "summary": "",
                            "src": "/finding-mk-average/",
                            "original_src": "https://leetcode.cn/problems/finding-mk-average/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2395.8765531206,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3505. 使 K 个子数组内元素相等的最少操作数",
                            "summary": "",
                            "src": "/minimum-operations-to-make-elements-within-k-subarrays-equal/",
                            "original_src": "https://leetcode.cn/problems/minimum-operations-to-make-elements-within-k-subarrays-equal/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2538.8958579924,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3013. 将数组分成最小总代价的子数组 II",
                            "summary": "",
                            "src": "/divide-an-array-into-subarrays-with-minimum-cost-ii/",
                            "original_src": "https://leetcode.cn/problems/divide-an-array-into-subarrays-with-minimum-cost-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2540.438150736,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3321. 计算子数组的 x-sum II",
                            "summary": "",
                            "src": "/find-x-sum-of-all-k-long-subarrays-ii/",
                            "original_src": "https://leetcode.cn/problems/find-x-sum-of-all-k-long-subarrays-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2598.4563109814,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "LCP 24. 数字游戏",
                            "summary": "",
                            "src": "/5TxKeK/",
                            "original_src": "https://leetcode.cn/problems/5TxKeK/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3369. 设计数组统计跟踪器",
                            "summary": "",
                            "src": "/design-an-array-statistics-tracker/",
                            "original_src": "https://leetcode.cn/problems/design-an-array-statistics-tracker/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "3422. 将子数组元素变为相等所需的最小操作数",
                            "summary": "",
                            "src": "/minimum-operations-to-make-subarray-elements-equal/",
                            "original_src": "https://leetcode.cn/problems/minimum-operations-to-make-subarray-elements-equal/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "六、字典树（trie）",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§6.1 基础",
                            "summary": "<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/solutions/2993894/cong-er-cha-shu-dao-er-shi-liu-cha-shu-p-xsj4/\">模板</a><br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "208. 实现 Trie (前缀树)",
                                    "summary": "",
                                    "src": "/implement-trie-prefix-tree/",
                                    "original_src": "https://leetcode.cn/problems/implement-trie-prefix-tree/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3597. 分割字符串",
                                    "summary": "",
                                    "src": "/partition-string/",
                                    "original_src": "https://leetcode.cn/problems/partition-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "648. 单词替换",
                                    "summary": "",
                                    "src": "/replace-words/",
                                    "original_src": "https://leetcode.cn/problems/replace-words/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "720. 词典中最长的单词",
                                    "summary": "",
                                    "src": "/longest-word-in-dictionary/",
                                    "original_src": "https://leetcode.cn/problems/longest-word-in-dictionary/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2416. 字符串的前缀分数和",
                                    "summary": "",
                                    "src": "/sum-of-prefix-scores-of-strings/",
                                    "original_src": "https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1725.1995150882,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "677. 键值映射",
                                    "summary": "",
                                    "src": "/map-sum-pairs/",
                                    "original_src": "https://leetcode.cn/problems/map-sum-pairs/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1268. 搜索推荐系统",
                                    "summary": "",
                                    "src": "/search-suggestions-system/",
                                    "original_src": "https://leetcode.cn/problems/search-suggestions-system/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1573.4042963622,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1233. 删除子文件夹",
                                    "summary": "",
                                    "src": "/remove-sub-folders-from-the-filesystem/",
                                    "original_src": "https://leetcode.cn/problems/remove-sub-folders-from-the-filesystem/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1544.8261365027,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "820. 单词的压缩编码",
                                    "summary": "",
                                    "src": "/short-encoding-of-words/",
                                    "original_src": "https://leetcode.cn/problems/short-encoding-of-words/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1632.0191837349,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2261. 含最多 K 个可整除元素的子数组",
                                    "summary": "",
                                    "src": "/k-divisible-elements-subarrays/",
                                    "original_src": "https://leetcode.cn/problems/k-divisible-elements-subarrays/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1724.394164934,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1804. 实现 Trie （前缀树） II",
                                    "summary": "",
                                    "src": "/implement-trie-ii-prefix-tree/",
                                    "original_src": "https://leetcode.cn/problems/implement-trie-ii-prefix-tree/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "2168. 每个数字的频率都相同的独特子字符串的数量",
                                    "summary": "",
                                    "src": "/unique-substrings-with-equal-digit-frequency/",
                                    "original_src": "https://leetcode.cn/problems/unique-substrings-with-equal-digit-frequency/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§6.2 进阶",
                            "summary": "**思维扩展**：<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "211. 添加与搜索单词 - 数据结构设计",
                                    "summary": "",
                                    "src": "/design-add-and-search-words-data-structure/",
                                    "original_src": "https://leetcode.cn/problems/design-add-and-search-words-data-structure/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "676. 实现一个魔法字典",
                                    "summary": "",
                                    "src": "/implement-magic-dictionary/",
                                    "original_src": "https://leetcode.cn/problems/implement-magic-dictionary/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "212. 单词搜索 II",
                                    "summary": "",
                                    "src": "/word-search-ii/",
                                    "original_src": "https://leetcode.cn/problems/word-search-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3093. 最长公共后缀查询",
                                    "summary": "",
                                    "src": "/longest-common-suffix-queries/",
                                    "original_src": "https://leetcode.cn/problems/longest-common-suffix-queries/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2118.3732356694,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "745. 前缀和后缀搜索",
                                    "summary": "",
                                    "src": "/prefix-and-suffix-search/",
                                    "original_src": "https://leetcode.cn/problems/prefix-and-suffix-search/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "3045. 统计前后缀下标对 II",
                                    "summary": "",
                                    "src": "/count-prefix-and-suffix-pairs-ii/",
                                    "original_src": "https://leetcode.cn/problems/count-prefix-and-suffix-pairs-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2327.5726642605,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "336. 回文对",
                                    "summary": "",
                                    "src": "/palindrome-pairs/",
                                    "original_src": "https://leetcode.cn/problems/palindrome-pairs/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1948. 删除系统中的重复文件夹",
                                    "summary": "",
                                    "src": "/delete-duplicate-folders-in-system/",
                                    "original_src": "https://leetcode.cn/problems/delete-duplicate-folders-in-system/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2533.7796160302,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "425. 单词方块",
                                    "summary": "",
                                    "src": "/word-squares/",
                                    "original_src": "https://leetcode.cn/problems/word-squares/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "527. 单词缩写",
                                    "summary": "",
                                    "src": "/word-abbreviation/",
                                    "original_src": "https://leetcode.cn/problems/word-abbreviation/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "588. 设计内存文件系统",
                                    "summary": "",
                                    "src": "/design-in-memory-file-system/",
                                    "original_src": "https://leetcode.cn/problems/design-in-memory-file-system/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "616. 给字符串添加加粗标签",
                                    "summary": "",
                                    "src": "/add-bold-tag-in-string/",
                                    "original_src": "https://leetcode.cn/problems/add-bold-tag-in-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "758. 字符串中的加粗单词",
                                    "summary": "",
                                    "src": "/bold-words-in-string/",
                                    "original_src": "https://leetcode.cn/problems/bold-words-in-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1547.0385279086,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "642. 设计搜索自动补全系统",
                                    "summary": "",
                                    "src": "/design-search-autocomplete-system/",
                                    "original_src": "https://leetcode.cn/problems/design-search-autocomplete-system/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1065. 字符串的索引对",
                                    "summary": "",
                                    "src": "/index-pairs-of-a-string/",
                                    "original_src": "https://leetcode.cn/problems/index-pairs-of-a-string/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1389.331169471,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1166. 设计文件系统",
                                    "summary": "",
                                    "src": "/design-file-system/",
                                    "original_src": "https://leetcode.cn/problems/design-file-system/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 1479.0110934646,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "1858. 包含所有前缀的最长单词",
                                    "summary": "",
                                    "src": "/longest-word-with-all-prefixes/",
                                    "original_src": "https://leetcode.cn/problems/longest-word-with-all-prefixes/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                },
                                {
                                    "title": "440. 字典序的第K小数字",
                                    "summary": "",
                                    "src": "/k-th-smallest-in-lexicographical-order/",
                                    "original_src": "https://leetcode.cn/problems/k-th-smallest-in-lexicographical-order/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§6.3 字典树优化 DP",
                            "summary": "",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "139. 单词拆分",
                                    "summary": "",
                                    "src": "/word-break/",
                                    "original_src": "https://leetcode.cn/problems/word-break/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "140. 单词拆分 II",
                                    "summary": "",
                                    "src": "/word-break-ii/",
                                    "original_src": "https://leetcode.cn/problems/word-break-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "面试题 17.13. 恢复空格",
                                    "summary": "",
                                    "src": "/re-space-lcci/",
                                    "original_src": "https://leetcode.cn/problems/re-space-lcci/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "472. 连接词",
                                    "summary": "",
                                    "src": "/concatenated-words/",
                                    "original_src": "https://leetcode.cn/problems/concatenated-words/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2977. 转换字符串的最小成本 II",
                                    "summary": "",
                                    "src": "/minimum-cost-to-convert-string-ii/",
                                    "original_src": "https://leetcode.cn/problems/minimum-cost-to-convert-string-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2695.809667046,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "§6.4 0-1 字典树（异或字典树）",
                            "summary": "部分题目也可以用试填法解决。<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [
                                {
                                    "title": "421. 数组中两个数的最大异或值",
                                    "summary": "",
                                    "src": "/maximum-xor-of-two-numbers-in-an-array/",
                                    "original_src": "https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2935. 找出强数对的最大异或值 II",
                                    "summary": "",
                                    "src": "/maximum-strong-pair-xor-ii/",
                                    "original_src": "https://leetcode.cn/problems/maximum-strong-pair-xor-ii/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2348.7273357105,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1707. 与数组中元素的最大异或值",
                                    "summary": "",
                                    "src": "/maximum-xor-with-an-element-from-array/",
                                    "original_src": "https://leetcode.cn/problems/maximum-xor-with-an-element-from-array/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2358.9669560824,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1803. 统计异或值在范围内的数对有多少",
                                    "summary": "",
                                    "src": "/count-pairs-with-xor-in-a-range/",
                                    "original_src": "https://leetcode.cn/problems/count-pairs-with-xor-in-a-range/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2479.3282985529,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "1938. 查询最大基因差",
                                    "summary": "",
                                    "src": "/maximum-genetic-difference-query/",
                                    "original_src": "https://leetcode.cn/problems/maximum-genetic-difference-query/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": 2502.5176603922,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": false,
                                    "last_update": ""
                                },
                                {
                                    "title": "2479. 两个不重叠子树的最大异或值",
                                    "summary": "",
                                    "src": "/maximum-xor-of-two-non-overlapping-subtrees/",
                                    "original_src": "https://leetcode.cn/problems/maximum-xor-of-two-non-overlapping-subtrees/",
                                    "sort": 0,
                                    "isLeaf": true,
                                    "solution": null,
                                    "score": null,
                                    "leafChild": [],
                                    "nonLeafChild": [],
                                    "isPremium": true,
                                    "last_update": ""
                                }
                            ],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "七、并查集",
                    "summary": "模板：<br>```py [sol-Python3]<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "返回 x 所在集合的大小",
            "summary": "class UnionFind:<br>def __init__(self, n: int):<br>self._fa = list(range(n))  # 代表元<br>self._size = [1] * n  # 集合大小<br>self.cc = n  # 连通块个数<br>def find(self, x: int) -> int:<br>if self._fa[x] != x:<br>self._fa[x] = self.find(self._fa[x])  # fa 改成代表元<br>return self._fa[x]<br>def is_same(self, x: int, y: int) -> bool:<br>return self.find(x) == self.find(y)<br>def merge(self, from_: int, to: int) -> bool:<br>x, y = self.find(from_), self.find(to)<br>if x == y:  # from 和 to 在同一个集合，不做合并<br>return False<br>self._fa[x] = y  # 合并集合。修改后就可以认为 from 和 to 在同一个集合了<br>self._size[y] += self._size[x]  # 更新集合大小（注意集合大小保存在代表元上）<br>self.cc -= 1  # 成功合并，连通块个数减一<br>return True<br>def get_size(self, x: int) -> int:<br>return self._size[self.find(x)]  # 集合大小保存在代表元上<br>```<br>```java [sol-Java]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>class UnionFind {<br>private final int[] fa; // 代表元<br>private final int[] size; // 集合大小<br>public int cc; // 连通块个数<br>UnionFind(int n) {<br>// 一开始有 n 个集合 {0}, {1}, ..., {n-1}<br>// 集合 i 的代表元是自己，大小为 1<br>fa = new int[n];<br>for (int i = 0; i < n; i++) {<br>fa[i] = i;<br>}<br>size = new int[n];<br>Arrays.fill(size, 1);<br>cc = n;<br>}<br>// 返回 x 所在集合的代表元<br>// 同时做路径压缩，也就是把 x 所在集合中的所有元素的 fa 都改成代表元<br>public int find(int x) {<br>// 如果 fa[x] == x，则表示 x 是代表元<br>if (fa[x] != x) {<br>fa[x] = find(fa[x]); // fa 改成代表元<br>}<br>return fa[x];<br>}<br>// 判断 x 和 y 是否在同一个集合<br>public boolean isSame(int x, int y) {<br>// 如果 x 的代表元和 y 的代表元相同，那么 x 和 y 就在同一个集合<br>// 这就是代表元的作用：用来快速判断两个元素是否在同一个集合<br>return find(x) == find(y);<br>}<br>// 把 from 所在集合合并到 to 所在集合中<br>// 返回是否合并成功<br>public boolean merge(int from, int to) {<br>int x = find(from);<br>int y = find(to);<br>if (x == y) { // from 和 to 在同一个集合，不做合并<br>return false;<br>}<br>fa[x] = y; // 合并集合。修改后就可以认为 from 和 to 在同一个集合了<br>size[y] += size[x]; // 更新集合大小（注意集合大小保存在代表元上）<br>// 无需更新 size[x]，因为我们不用 size[x] 而是用 size[find(x)] 获取集合大小，但 find(x) == y，我们不会再访问 size[x]<br>cc--; // 成功合并，连通块个数减一<br>return true;<br>}<br>// 返回 x 所在集合的大小<br>public int getSize(int x) {<br>return size[find(x)]; // 集合大小保存在代表元上<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>class UnionFind {<br>vector<int> fa; // 代表元<br>vector<int> sz; // 集合大小<br>public:<br>int cc; // 连通块个数<br>UnionFind(int n) : fa(n), sz(n, 1), cc(n) {<br>// 一开始有 n 个集合 {0}, {1}, ..., {n-1}<br>// 集合 i 的代表元是自己，大小为 1<br>ranges::iota(fa, 0); // iota(fa.begin(), fa.end(), 0);<br>}<br>// 返回 x 所在集合的代表元<br>// 同时做路径压缩，也就是把 x 所在集合中的所有元素的 fa 都改成代表元<br>int find(int x) {<br>// 如果 fa[x] == x，则表示 x 是代表元<br>if (fa[x] != x) {<br>fa[x] = find(fa[x]); // fa 改成代表元<br>}<br>return fa[x];<br>}<br>// 判断 x 和 y 是否在同一个集合<br>bool is_same(int x, int y) {<br>// 如果 x 的代表元和 y 的代表元相同，那么 x 和 y 就在同一个集合<br>// 这就是代表元的作用：用来快速判断两个元素是否在同一个集合<br>return find(x) == find(y);<br>}<br>// 把 from 所在集合合并到 to 所在集合中<br>// 返回是否合并成功<br>bool merge(int from, int to) {<br>int x = find(from), y = find(to);<br>if (x == y) { // from 和 to 在同一个集合，不做合并<br>return false;<br>}<br>fa[x] = y; // 合并集合。修改后就可以认为 from 和 to 在同一个集合了<br>sz[y] += sz[x]; // 更新集合大小（注意集合大小保存在代表元上）<br>// 无需更新 sz[x]，因为我们不用 sz[x] 而是用 sz[find(x)] 获取集合大小，但 find(x) == y，我们不会再访问 sz[x]<br>cc--; // 成功合并，连通块个数减一<br>return true;<br>}<br>// 返回 x 所在集合的大小<br>int get_size(int x) {<br>return sz[find(x)]; // 集合大小保存在代表元上<br>}<br>};<br>```<br>```go [sol-Go]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>type unionFind struct {<br>fa []int // 代表元<br>sz []int // 集合大小<br>cc int   // 连通块个数<br>}<br>func newUnionFind(n int) unionFind {<br>fa := make([]int, n)<br>sz := make([]int, n)<br>// 一开始有 n 个集合 {0}, {1}, ..., {n-1}<br>// 集合 i 的代表元是自己，大小为 1<br>for i := range fa {<br>fa[i] = i<br>sz[i] = 1<br>}<br>return unionFind{fa, sz, n}<br>}<br>// 返回 x 所在集合的代表元<br>// 同时做路径压缩，也就是把 x 所在集合中的所有元素的 fa 都改成代表元<br>func (u unionFind) find(x int) int {<br>// 如果 fa[x] == x，则表示 x 是代表元<br>if u.fa[x] != x {<br>u.fa[x] = u.find(u.fa[x]) // fa 改成代表元<br>}<br>return u.fa[x]<br>}<br>// 判断 x 和 y 是否在同一个集合<br>func (u unionFind) same(x, y int) bool {<br>// 如果 x 的代表元和 y 的代表元相同，那么 x 和 y 就在同一个集合<br>// 这就是代表元的作用：用来快速判断两个元素是否在同一个集合<br>return u.find(x) == u.find(y)<br>}<br>// 把 from 所在集合合并到 to 所在集合中<br>// 返回是否合并成功<br>func (u *unionFind) merge(from, to int) bool {<br>x, y := u.find(from), u.find(to)<br>if x == y { // from 和 to 在同一个集合，不做合并<br>return false<br>}<br>u.fa[x] = y // 合并集合。修改后就可以认为 from 和 to 在同一个集合了<br>u.sz[y] += u.sz[x] // 更新集合大小（注意集合大小保存在代表元上）<br>// 无需更新 sz[x]，因为我们不用 sz[x] 而是用 sz[find(x)] 获取集合大小，但 find(x) == y，我们不会再访问 sz[x]<br>u.cc-- // 成功合并，连通块个数减一<br>return true<br>}<br>// 返回 x 所在集合的大小<br>func (u unionFind) size(x int) int {<br>return u.sz[u.find(x)] // 集合大小保存在代表元上<br>}<br>```<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [],
            "nonLeafChild": [
                {
                    "title": "§7.1 基础",
                    "summary": "更多基础题，见 <a href=\"/lc-rating/list/grid\">网格图题单</a> 中的 DFS 和 <a href=\"/lc-rating/list/graph\">图论题单</a> 中的 DFS，其中大部分题目也可以用并查集实现。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "3493. 属性图",
                            "summary": "",
                            "src": "/properties-graph/",
                            "original_src": "https://leetcode.cn/problems/properties-graph/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1565.0047379604,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3532. 针对图的路径存在性查询 I",
                            "summary": "",
                            "src": "/path-existence-queries-in-a-graph-i/",
                            "original_src": "https://leetcode.cn/problems/path-existence-queries-in-a-graph-i/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1658.552255225,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "990. 等式方程的可满足性",
                            "summary": "",
                            "src": "/satisfiability-of-equality-equations/",
                            "original_src": "https://leetcode.cn/problems/satisfiability-of-equality-equations/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1638.0148920643,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "721. 账户合并",
                            "summary": "",
                            "src": "/accounts-merge/",
                            "original_src": "https://leetcode.cn/problems/accounts-merge/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "737. 句子相似性 II",
                            "summary": "",
                            "src": "/sentence-similarity-ii/",
                            "original_src": "https://leetcode.cn/problems/sentence-similarity-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "1101. 彼此熟识的最早时间",
                            "summary": "",
                            "src": "/the-earliest-moment-when-everyone-become-friends/",
                            "original_src": "https://leetcode.cn/problems/the-earliest-moment-when-everyone-become-friends/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1558.4971807039,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "1258. 近义词句子",
                            "summary": "",
                            "src": "/synonymous-sentences/",
                            "original_src": "https://leetcode.cn/problems/synonymous-sentences/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1847.2077654978,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "§7.2 进阶",
                    "summary": "另见 <a href=\"/lc-rating/list/graph\">图论题单</a> 中的最小生成树。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "3551. 数位和排序需要的最小交换次数",
                            "summary": "",
                            "src": "/minimum-swaps-to-sort-by-digit-sum/",
                            "original_src": "https://leetcode.cn/problems/minimum-swaps-to-sort-by-digit-sum/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1506.7234154594,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2471. 逐层排序二叉树所需的最少操作数目",
                            "summary": "",
                            "src": "/minimum-number-of-operations-to-sort-a-binary-tree-by-level/",
                            "original_src": "https://leetcode.cn/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1635.1520858279,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3613. 最小化连通分量的最大成本",
                            "summary": "",
                            "src": "/minimize-maximum-component-cost/",
                            "original_src": "https://leetcode.cn/problems/minimize-maximum-component-cost/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3608. 包含 K 个连通分量需要的最小时间",
                            "summary": "",
                            "src": "/minimum-time-for-k-connected-components/",
                            "original_src": "https://leetcode.cn/problems/minimum-time-for-k-connected-components/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1202. 交换字符串中的元素",
                            "summary": "",
                            "src": "/smallest-string-with-swaps/",
                            "original_src": "https://leetcode.cn/problems/smallest-string-with-swaps/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1855.4479039876,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1061. 按字典序排列最小的等效字符串",
                            "summary": "",
                            "src": "/lexicographically-smallest-equivalent-string/",
                            "original_src": "https://leetcode.cn/problems/lexicographically-smallest-equivalent-string/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1722. 执行交换操作后的最小汉明距离",
                            "summary": "",
                            "src": "/minimize-hamming-distance-after-swap-operations/",
                            "original_src": "https://leetcode.cn/problems/minimize-hamming-distance-after-swap-operations/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1892.1600619469,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "765. 情侣牵手",
                            "summary": "",
                            "src": "/couples-holding-hands/",
                            "original_src": "https://leetcode.cn/problems/couples-holding-hands/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1999.1208076854,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "684. 冗余连接",
                            "summary": "",
                            "src": "/redundant-connection/",
                            "original_src": "https://leetcode.cn/problems/redundant-connection/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "685. 冗余连接 II",
                            "summary": "",
                            "src": "/redundant-connection-ii/",
                            "original_src": "https://leetcode.cn/problems/redundant-connection-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "947. 移除最多的同行或同列石头",
                            "summary": "",
                            "src": "/most-stones-removed-with-same-row-or-column/",
                            "original_src": "https://leetcode.cn/problems/most-stones-removed-with-same-row-or-column/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2034.6759416871,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "839. 相似字符串组",
                            "summary": "",
                            "src": "/similar-string-groups/",
                            "original_src": "https://leetcode.cn/problems/similar-string-groups/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2053.7468090497,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1970. 你能穿过矩阵的最后一天",
                            "summary": "",
                            "src": "/last-day-where-you-can-still-cross/",
                            "original_src": "https://leetcode.cn/problems/last-day-where-you-can-still-cross/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2123.5708982185,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2076. 处理含限制条件的好友请求",
                            "summary": "",
                            "src": "/process-restricted-friend-requests/",
                            "original_src": "https://leetcode.cn/problems/process-restricted-friend-requests/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2130.9348604091,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1579. 保证图可完全遍历",
                            "summary": "",
                            "src": "/remove-max-number-of-edges-to-keep-graph-fully-traversable/",
                            "original_src": "https://leetcode.cn/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2131.7917160422,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "959. 由斜杠划分区域",
                            "summary": "",
                            "src": "/regions-cut-by-slashes/",
                            "original_src": "https://leetcode.cn/problems/regions-cut-by-slashes/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2135.5738659086,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2812. 找出最安全路径",
                            "summary": "",
                            "src": "/find-the-safest-path-in-a-grid/",
                            "original_src": "https://leetcode.cn/problems/find-the-safest-path-in-a-grid/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2153.5854429139,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2503. 矩阵查询可获得的最大分数",
                            "summary": "",
                            "src": "/maximum-number-of-points-from-grid-queries/",
                            "original_src": "https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2195.6540241654,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3600. 升级后最大生成树稳定性",
                            "summary": "",
                            "src": "/maximize-spanning-tree-stability-with-upgrades/",
                            "original_src": "https://leetcode.cn/problems/maximize-spanning-tree-stability-with-upgrades/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2867. 统计树中的合法路径数目",
                            "summary": "",
                            "src": "/count-valid-paths-in-a-tree/",
                            "original_src": "https://leetcode.cn/problems/count-valid-paths-in-a-tree/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2428.3242593838,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2421. 好路径的数目",
                            "summary": "",
                            "src": "/number-of-good-paths/",
                            "original_src": "https://leetcode.cn/problems/number-of-good-paths/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2444.6660756903,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2157. 字符串分组",
                            "summary": "",
                            "src": "/groups-of-strings/",
                            "original_src": "https://leetcode.cn/problems/groups-of-strings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2499.3282271507,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1632. 矩阵转换后的秩",
                            "summary": "",
                            "src": "/rank-transform-of-a-matrix/",
                            "original_src": "https://leetcode.cn/problems/rank-transform-of-a-matrix/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2529.5251086936,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "803. 打砖块",
                            "summary": "",
                            "src": "/bricks-falling-when-hit/",
                            "original_src": "https://leetcode.cn/problems/bricks-falling-when-hit/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2765.2533837781,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3235. 判断矩形的两个角落是否可达",
                            "summary": "",
                            "src": "/check-if-the-rectangle-corner-is-reachable/",
                            "original_src": "https://leetcode.cn/problems/check-if-the-rectangle-corner-is-reachable/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 3773.7596150919,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "LCP 71. 集水器",
                            "summary": "",
                            "src": "/kskhHQ/",
                            "original_src": "https://leetcode.cn/problems/kskhHQ/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2371. 最小化网格中的最大值",
                            "summary": "",
                            "src": "/minimize-maximum-value-in-a-grid/",
                            "original_src": "https://leetcode.cn/problems/minimize-maximum-value-in-a-grid/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "2459. 通过移动项目到空白区域来排序数组",
                            "summary": "",
                            "src": "/sort-array-by-moving-items-to-empty-space/",
                            "original_src": "https://leetcode.cn/problems/sort-array-by-moving-items-to-empty-space/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "§7.3 GCD 并查集",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "2709. 最大公约数遍历",
                            "summary": "",
                            "src": "/greatest-common-divisor-traversal/",
                            "original_src": "https://leetcode.cn/problems/greatest-common-divisor-traversal/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2171.9645269732,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1627. 带阈值的图连通性",
                            "summary": "",
                            "src": "/graph-connectivity-with-threshold/",
                            "original_src": "https://leetcode.cn/problems/graph-connectivity-with-threshold/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2221.3538766773,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "952. 按公因数计算最大组件大小",
                            "summary": "",
                            "src": "/largest-component-size-by-common-factor/",
                            "original_src": "https://leetcode.cn/problems/largest-component-size-by-common-factor/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2272.1122260637,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1998. 数组的最大公因数排序",
                            "summary": "",
                            "src": "/gcd-sort-of-an-array/",
                            "original_src": "https://leetcode.cn/problems/gcd-sort-of-an-array/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2429.0940568399,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3378. 统计最小公倍数图中的连通块数目",
                            "summary": "",
                            "src": "/count-connected-components-in-lcm-graph/",
                            "original_src": "https://leetcode.cn/problems/count-connected-components-in-lcm-graph/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2532.0192714689,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "§7.4 数组上的并查集",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "1562. 查找大小为 M 的最新分组",
                            "summary": "",
                            "src": "/find-latest-group-of-size-m/",
                            "original_src": "https://leetcode.cn/problems/find-latest-group-of-size-m/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1928.2304187946,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1488. 避免洪水泛滥",
                            "summary": "",
                            "src": "/avoid-flood-in-the-city/",
                            "original_src": "https://leetcode.cn/problems/avoid-flood-in-the-city/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1973.7407637067,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1353. 最多可以参加的会议数目",
                            "summary": "",
                            "src": "/maximum-number-of-events-that-can-be-attended/",
                            "original_src": "https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2015.7291888336,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2382. 删除操作后的最大子段和",
                            "summary": "",
                            "src": "/maximum-segment-sum-after-removals/",
                            "original_src": "https://leetcode.cn/problems/maximum-segment-sum-after-removals/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2136.3013259524,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2334. 元素值大于变化阈值的子数组",
                            "summary": "",
                            "src": "/subarray-with-elements-greater-than-varying-threshold/",
                            "original_src": "https://leetcode.cn/problems/subarray-with-elements-greater-than-varying-threshold/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2381.2160234811,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2612. 最少翻转操作数",
                            "summary": "",
                            "src": "/minimum-reverse-operations/",
                            "original_src": "https://leetcode.cn/problems/minimum-reverse-operations/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2824.4551372454,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "§7.5 区间并查集",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "1851. 包含每个查询的最小区间",
                            "summary": "",
                            "src": "/minimum-interval-to-include-each-query/",
                            "original_src": "https://leetcode.cn/problems/minimum-interval-to-include-each-query/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2286.1378742318,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3244. 新增道路查询后的最短距离 II",
                            "summary": "",
                            "src": "/shortest-distance-after-road-addition-queries-ii/",
                            "original_src": "https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2270.2002503611,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2158. 每天绘制新区域的数量",
                            "summary": "",
                            "src": "/amount-of-new-area-painted-each-day/",
                            "original_src": "https://leetcode.cn/problems/amount-of-new-area-painted-each-day/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "§7.6 边权并查集",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "399. 除法求值",
                            "summary": "",
                            "src": "/evaluate-division/",
                            "original_src": "https://leetcode.cn/problems/evaluate-division/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2307. 检查方程中的矛盾之处",
                            "summary": "",
                            "src": "/check-for-contradictions-in-equations/",
                            "original_src": "https://leetcode.cn/problems/check-for-contradictions-in-equations/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "八、树状数组和线段树",
                    "summary": "能用树状数组解决的题目，也能用线段树解决（反过来不一定）。但树状数组实现简单，代码短。<br>为方便大家练习，我把适合用树状数组解决的题目分到树状数组中，其余分到线段树中。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [
                        {
                            "title": "§8.1 树状数组",
                            "summary": "讲解：<a href=\"https://leetcode.cn/problems/range-sum-query-mutable/solution/dai-ni-fa-ming-shu-zhuang-shu-zu-fu-shu-lyfll/\">带你发明树状数组！附数学证明</a><br>模板：<br>```py [sol-Python3]<br>",
                            "src": "",
                            "original_src": "",
                            "sort": 0,
                            "isLeaf": false,
                            "solution": "",
                            "score": 0,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "时间复杂度 O(log n)",
            "summary": "class FenwickTree:<br>def __init__(self, n: int):<br>self.tree = [0] * (n + 1)  # 使用下标 1 到 n<br>def update(self, i: int, val: int) -> None:<br>while i < len(self.tree):<br>self.tree[i] += val<br>i += i & -i<br>def pre(self, i: int) -> int:<br>res = 0<br>while i > 0:<br>res += self.tree[i]<br>i &= i - 1<br>return res<br>def query(self, l: int, r: int) -> int:<br>if r < l:<br>return 0<br>return self.pre(r) - self.pre(l - 1)<br>```<br>```java [sol-Java]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>class FenwickTree {<br>private final long[] tree; // 如果计算结果没有超出 int 范围，可以改成 int<br>public FenwickTree(int n) {<br>tree = new long[n + 1]; // 使用下标 1 到 n<br>}<br>// a[i] 增加 val<br>// 1 <= i <= n<br>// 时间复杂度 O(log n)<br>public void update(int i, long val) {<br>for (; i < tree.length; i += i & -i) {<br>tree[i] += val;<br>}<br>}<br>// 求前缀和 a[1] + ... + a[i]<br>// 1 <= i <= n<br>// 时间复杂度 O(log n)<br>public long pre(int i) {<br>long res = 0;<br>for (; i > 0; i &= i - 1) {<br>res += tree[i];<br>}<br>return res;<br>}<br>// 求区间和 a[l] + ... + a[r]<br>// 1 <= l <= r <= n<br>// 时间复杂度 O(log n)<br>public long query(int l, int r) {<br>if (r < l) {<br>return 0;<br>}<br>return pre(r) - pre(l - 1);<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 根据题目用 FenwickTree<int> t(n) 或者 FenwickTree<long long> t(n) 初始化<br>template<typename T><br>class FenwickTree {<br>vector<T> tree;<br>public:<br>// 使用下标 1 到 n<br>FenwickTree(int n) : tree(n + 1) {}<br>// a[i] 增加 val<br>// 1 <= i <= n<br>// 时间复杂度 O(log n)<br>void update(int i, T val) {<br>for (; i < tree.size(); i += i & -i) {<br>tree[i] += val;<br>}<br>}<br>// 求前缀和 a[1] + ... + a[i]<br>// 1 <= i <= n<br>// 时间复杂度 O(log n)<br>T pre(int i) const {<br>T res = 0;<br>for (; i > 0; i &= i - 1) {<br>res += tree[i];<br>}<br>return res;<br>}<br>// 求区间和 a[l] + ... + a[r]<br>// 1 <= l <= r <= n<br>// 时间复杂度 O(log n)<br>T query(int l, int r) const {<br>if (r < l) {<br>return 0;<br>}<br>return pre(r) - pre(l - 1);<br>}<br>};<br>```<br>```go [sol-Go]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>type fenwick []int<br>func newFenwickTree(n int) fenwick {<br>return make(fenwick, n+1) // 使用下标 1 到 n<br>}<br>// a[i] 增加 val<br>// 1 <= i <= n<br>// 时间复杂度 O(log n)<br>func (f fenwick) update(i int, val int) {<br>for ; i < len(f); i += i & -i {<br>f[i] += val<br>}<br>}<br>// 求前缀和 a[1] + ... + a[i]<br>// 1 <= i <= n<br>// 时间复杂度 O(log n)<br>func (f fenwick) pre(i int) (res int) {<br>for ; i > 0; i &= i - 1 {<br>res += f[i]<br>}<br>return<br>}<br>// 求区间和 a[l] + ... + a[r]<br>// 1 <= l <= r <= n<br>// 时间复杂度 O(log n)<br>func (f fenwick) query(l, r int) int {<br>if r < l {<br>return 0<br>}<br>return f.pre(r) - f.pre(l-1)<br>}<br>```<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [
                {
                    "title": "307. 区域和检索 - 数组可修改",
                    "summary": "",
                    "src": "/range-sum-query-mutable/",
                    "original_src": "https://leetcode.cn/problems/range-sum-query-mutable/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3072. 将元素分配到两个数组中 II",
                    "summary": "",
                    "src": "/distribute-elements-into-two-arrays-ii/",
                    "original_src": "https://leetcode.cn/problems/distribute-elements-into-two-arrays-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2052.8622720512,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3624. 位计数深度为 K 的整数数目 II",
                    "summary": "",
                    "src": "/number-of-integers-with-popcount-depth-equal-to-k-ii/",
                    "original_src": "https://leetcode.cn/problems/number-of-integers-with-popcount-depth-equal-to-k-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3187. 数组中的峰值",
                    "summary": "",
                    "src": "/peaks-in-array/",
                    "original_src": "https://leetcode.cn/problems/peaks-in-array/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2154.4458036869,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1649. 通过指令创建有序数组",
                    "summary": "",
                    "src": "/create-sorted-array-through-instructions/",
                    "original_src": "https://leetcode.cn/problems/create-sorted-array-through-instructions/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2207.8565809952,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1626. 无矛盾的最佳球队",
                    "summary": "",
                    "src": "/best-team-with-no-conflicts/",
                    "original_src": "https://leetcode.cn/problems/best-team-with-no-conflicts/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2027.3839266711,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1409. 查询带键的排列",
                    "summary": "",
                    "src": "/queries-on-a-permutation-with-key/",
                    "original_src": "https://leetcode.cn/problems/queries-on-a-permutation-with-key/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1334.5718985411,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2250. 统计包含每个点的矩形数目",
                    "summary": "",
                    "src": "/count-number-of-rectangles-containing-each-point/",
                    "original_src": "https://leetcode.cn/problems/count-number-of-rectangles-containing-each-point/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1997.7013718153,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2179. 统计数组中好三元组数目",
                    "summary": "",
                    "src": "/count-good-triplets-in-an-array/",
                    "original_src": "https://leetcode.cn/problems/count-good-triplets-in-an-array/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2272.4412003208,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1395. 统计作战单位数",
                    "summary": "",
                    "src": "/count-number-of-teams/",
                    "original_src": "https://leetcode.cn/problems/count-number-of-teams/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1343.628913055,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2659. 将数组清空",
                    "summary": "",
                    "src": "/make-array-empty/",
                    "original_src": "https://leetcode.cn/problems/make-array-empty/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2281.8816902545,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2653. 滑动子数组的美丽值",
                    "summary": "",
                    "src": "/sliding-subarray-beauty/",
                    "original_src": "https://leetcode.cn/problems/sliding-subarray-beauty/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1785.6006955353,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3515. 带权树中的最短路径",
                    "summary": "",
                    "src": "/shortest-path-in-a-weighted-tree/",
                    "original_src": "https://leetcode.cn/problems/shortest-path-in-a-weighted-tree/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2312.2207190263,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "LCP 05. 发 LeetCoin",
                    "summary": "",
                    "src": "/coin-bonus/",
                    "original_src": "https://leetcode.cn/problems/coin-bonus/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1505. 最多 K 次交换相邻数位后得到的最小整数",
                    "summary": "",
                    "src": "/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/",
                    "original_src": "https://leetcode.cn/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2336.5210003185,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2926. 平衡子序列的最大和",
                    "summary": "",
                    "src": "/maximum-balanced-subsequence-sum/",
                    "original_src": "https://leetcode.cn/problems/maximum-balanced-subsequence-sum/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2448.4455464535,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2736. 最大和查询",
                    "summary": "",
                    "src": "/maximum-sum-queries/",
                    "original_src": "https://leetcode.cn/problems/maximum-sum-queries/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2533.2830157959,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3382. 用点构造面积最大的矩形 II",
                    "summary": "",
                    "src": "/maximum-area-rectangle-with-point-constraints-ii/",
                    "original_src": "https://leetcode.cn/problems/maximum-area-rectangle-with-point-constraints-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2722.8634460016,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3590. 第 K 小的路径异或和",
                    "summary": "",
                    "src": "/kth-smallest-path-xor-sum/",
                    "original_src": "https://leetcode.cn/problems/kth-smallest-path-xor-sum/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3245. 交替组 III",
                    "summary": "",
                    "src": "/alternating-groups-iii/",
                    "original_src": "https://leetcode.cn/problems/alternating-groups-iii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 3112.0402038423,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1756. 设计最近使用（MRU）队列",
                    "summary": "",
                    "src": "/design-most-recently-used-queue/",
                    "original_src": "https://leetcode.cn/problems/design-most-recently-used-queue/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                },
                {
                    "title": "60. 排列序列",
                    "summary": "",
                    "src": "/permutation-sequence/",
                    "original_src": "https://leetcode.cn/problems/permutation-sequence/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3109. 查找排列的下标",
                    "summary": "",
                    "src": "/find-the-index-of-permutation/",
                    "original_src": "https://leetcode.cn/problems/find-the-index-of-permutation/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                },
                {
                    "title": "2519. 统计 K-Big 索引的数量",
                    "summary": "",
                    "src": "/count-the-number-of-k-big-indices/",
                    "original_src": "https://leetcode.cn/problems/count-the-number-of-k-big-indices/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                },
                {
                    "title": "2613. 美数对",
                    "summary": "",
                    "src": "/beautiful-pairs/",
                    "original_src": "https://leetcode.cn/problems/beautiful-pairs/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                },
                {
                    "title": "2921. 价格递增的最大利润三元组 II",
                    "summary": "",
                    "src": "/maximum-profitable-triplets-with-increasing-prices-ii/",
                    "original_src": "https://leetcode.cn/problems/maximum-profitable-triplets-with-increasing-prices-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                },
                {
                    "title": "308. 二维区域和检索 - 可变",
                    "summary": "",
                    "src": "/range-sum-query-2d-mutable/",
                    "original_src": "https://leetcode.cn/problems/range-sum-query-2d-mutable/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                }
            ],
            "nonLeafChild": [
                {
                    "title": "§8.2 逆序对",
                    "summary": "除了可以用树状数组解决，部分题目也可以在**归并排序**的同时计算。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "LCR 170. 交易逆序对的总数",
                            "summary": "",
                            "src": "/shu-zu-zhong-de-ni-xu-dui-lcof/",
                            "original_src": "https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "315. 计算右侧小于当前元素的个数",
                            "summary": "",
                            "src": "/count-of-smaller-numbers-after-self/",
                            "original_src": "https://leetcode.cn/problems/count-of-smaller-numbers-after-self/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "493. 翻转对",
                            "summary": "",
                            "src": "/reverse-pairs/",
                            "original_src": "https://leetcode.cn/problems/reverse-pairs/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "327. 区间和的个数",
                            "summary": "",
                            "src": "/count-of-range-sum/",
                            "original_src": "https://leetcode.cn/problems/count-of-range-sum/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2426. 满足不等式的数对数目",
                            "summary": "",
                            "src": "/number-of-pairs-satisfying-inequality/",
                            "original_src": "https://leetcode.cn/problems/number-of-pairs-satisfying-inequality/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2030.1021023033,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1850. 邻位交换的最小次数",
                            "summary": "",
                            "src": "/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/",
                            "original_src": "https://leetcode.cn/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2073.0124645606,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2193. 得到回文串的最少操作次数",
                            "summary": "",
                            "src": "/minimum-number-of-moves-to-make-palindrome/",
                            "original_src": "https://leetcode.cn/problems/minimum-number-of-moves-to-make-palindrome/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2090.6800569319,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1885. 统计数对",
                            "summary": "",
                            "src": "/count-pairs-in-two-arrays/",
                            "original_src": "https://leetcode.cn/problems/count-pairs-in-two-arrays/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "§8.3 线段树（无区间更新）",
                    "summary": "线段树本质是二叉树，在学习之前，建议先做做 <a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\">104. 二叉树的最大深度</a> 和 <a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\">111. 二叉树的最小深度</a>（自底向上写法），当作热身。<br><a href=\"https://www.bilibili.com/video/BV15gRaYZE5o/\">线段树：为什么要这样设计？</a> 理解线段树发明的动机。<br>把任意区间用 $\\mathcal{O}(\\log n)$ 个区间表示，线段树的每个节点记录对应区间的信息。<br>- **询问**：把询问区间拆分成 $\\mathcal{O}(\\log n)$ 个区间，对应着线段树的 $\\mathcal{O}(\\log n)$ 个节点，把这 $\\mathcal{O}(\\log n)$ 个节点的信息合并，即为答案。<br>- **单点更新**：有 $\\mathcal{O}(\\log n)$ 个区间包含被修改的位置，需要更新 $\\mathcal{O}(\\log n)$ 个节点的信息。<br>基础模板代码如下。为方便入门理解，我没有做复杂封装。通用模板代码可以参考 AtCoder Library 的 <a href=\"https://github.com/atcoder/ac-library/blob/master/atcoder/segtree.hpp\">segtree.hpp</a>。<br>```py [sol-Python3]<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "模板来源 https://leetcode.cn/circle/discuss/mOr1u6/",
            "summary": "",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [],
            "nonLeafChild": [],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "线段树有两个下标，一个是线段树节点的下标，另一个是线段树维护的区间的下标",
            "summary": "",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [],
            "nonLeafChild": [],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "节点的下标：从 1 开始，如果你想改成从 0 开始，需要把左右儿子下标分别改成 node*2+1 和 node*2+2",
            "summary": "",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [],
            "nonLeafChild": [],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "时间复杂度 O(log n)",
            "summary": "class SegmentTree:<br>def __init__(self, n: int, init_val=0):<br>if isinstance(init_val, int):<br>init_val = [init_val] * n<br>self._n = n<br>self._tree = [0] * (2 << (n - 1).bit_length())<br>self._build(init_val, 1, 0, n - 1)<br>def _merge_val(self, a: int, b: int) -> int:<br>return max(a, b)  # **根据题目修改**<br>def _maintain(self, node: int) -> None:<br>self._tree[node] = self._merge_val(self._tree[node * 2], self._tree[node * 2 + 1])<br>def _build(self, a: List[int], node: int, l: int, r: int) -> None:<br>if l == r:  # 叶子<br>self._tree[node] = a[l]  # 初始化叶节点的值<br>return<br>m = (l + r) // 2<br>self._build(a, node * 2, l, m)  # 初始化左子树<br>self._build(a, node * 2 + 1, m + 1, r)  # 初始化右子树<br>self._maintain(node)<br>def _update(self, node: int, l: int, r: int, i: int, val: int) -> None:<br>if l == r:  # 叶子（到达目标）<br>self._tree[node] = self._merge_val(self._tree[node], val)<br>return<br>m = (l + r) // 2<br>if i <= m:  # i 在左子树<br>self._update(node * 2, l, m, i, val)<br>else:  # i 在右子树<br>self._update(node * 2 + 1, m + 1, r, i, val)<br>self._maintain(node)<br>def _query(self, node: int, l: int, r: int, ql: int, qr: int) -> int:<br>if ql <= l and r <= qr:  # 当前子树完全在 [ql, qr] 内<br>return self._tree[node]<br>m = (l + r) // 2<br>if qr <= m:  # [ql, qr] 在左子树<br>return self._query(node * 2, l, m, ql, qr)<br>if ql > m:  # [ql, qr] 在右子树<br>return self._query(node * 2 + 1, m + 1, r, ql, qr)<br>l_res = self._query(node * 2, l, m, ql, qr)<br>r_res = self._query(node * 2 + 1, m + 1, r, ql, qr)<br>return self._merge_val(l_res, r_res)<br>def update(self, i: int, val: int) -> None:<br>self._update(1, 0, self._n - 1, i, val)<br>def query(self, ql: int, qr: int) -> int:<br>return self._query(1, 0, self._n - 1, ql, qr)<br>def get(self, i: int) -> int:<br>return self._query(1, 0, self._n - 1, i, i)<br>```<br>```java [sol-Java]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 线段树有两个下标，一个是线段树节点的下标，另一个是线段树维护的区间的下标<br>// 节点的下标：从 1 开始，如果你想改成从 0 开始，需要把左右儿子下标分别改成 node*2+1 和 node*2+2<br>// 区间的下标：从 0 开始<br>class SegmentTree {<br>private final int n;<br>private final long[] tree; // 如果计算结果没有超出 int 范围，可以改成 int<br>// 合并两个 val<br>private long mergeVal(long a, long b) {<br>return Math.max(a, b); // **根据题目修改**<br>}<br>// 线段树维护一个长为 n 的数组（下标从 0 到 n-1），元素初始值为 initVal<br>public SegmentTree(int n, long initVal) {<br>this.n = n;<br>long[] a = new long[n];<br>Arrays.fill(a, initVal);<br>tree = new long[2 << (32 - Integer.numberOfLeadingZeros(n - 1))];<br>build(a, 1, 0, n - 1);<br>}<br>// 线段树维护数组 a<br>public SegmentTree(long[] a) {<br>n = a.length;<br>tree = new long[2 << (32 - Integer.numberOfLeadingZeros(n - 1))];<br>build(a, 1, 0, n - 1);<br>}<br>// 更新 a[i] 为 mergeVal(a[i], val)<br>// 时间复杂度 O(log n)<br>public void update(int i, long val) {<br>update(1, 0, n - 1, i, val);<br>}<br>// 返回用 mergeVal 合并所有 a[i] 的计算结果，其中 i 在闭区间 [ql, qr] 中<br>// 时间复杂度 O(log n)<br>public long query(int ql, int qr) {<br>return query(1, 0, n - 1, ql, qr);<br>}<br>// 获取 a[i] 的值<br>// 时间复杂度 O(log n)<br>public long get(int i) {<br>return query(1, 0, n - 1, i, i);<br>}<br>// 合并左右儿子的 val 到当前节点的 val<br>private void maintain(int node) {<br>tree[node] = mergeVal(tree[node * 2], tree[node * 2 + 1]);<br>}<br>// 用 a 初始化线段树<br>// 时间复杂度 O(n)<br>private void build(long[] a, int node, int l, int r) {<br>if (l == r) { // 叶子<br>tree[node] = a[l]; // 初始化叶节点的值<br>return;<br>}<br>int m = (l + r) / 2;<br>build(a, node * 2, l, m); // 初始化左子树<br>build(a, node * 2 + 1, m + 1, r); // 初始化右子树<br>maintain(node);<br>}<br>private void update(int node, int l, int r, int i, long val) {<br>if (l == r) { // 叶子（到达目标）<br>// 如果想直接替换的话，可以写 tree[node] = val<br>tree[node] = mergeVal(tree[node], val);<br>return;<br>}<br>int m = (l + r) / 2;<br>if (i <= m) { // i 在左子树<br>update(node * 2, l, m, i, val);<br>} else { // i 在右子树<br>update(node * 2 + 1, m + 1, r, i, val);<br>}<br>maintain(node);<br>}<br>private long query(int node, int l, int r, int ql, int qr) {<br>if (ql <= l && r <= qr) { // 当前子树完全在 [ql, qr] 内<br>return tree[node];<br>}<br>int m = (l + r) / 2;<br>if (qr <= m) { // [ql, qr] 在左子树<br>return query(node * 2, l, m, ql, qr);<br>}<br>if (ql > m) { // [ql, qr] 在右子树<br>return query(node * 2 + 1, m + 1, r, ql, qr);<br>}<br>long lRes = query(node * 2, l, m, ql, qr);<br>long rRes = query(node * 2 + 1, m + 1, r, ql, qr);<br>return mergeVal(lRes, rRes);<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 线段树有两个下标，一个是线段树节点的下标，另一个是线段树维护的区间的下标<br>// 节点的下标：从 1 开始，如果你想改成从 0 开始，需要把左右儿子下标分别改成 node*2+1 和 node*2+2<br>// 区间的下标：从 0 开始<br>template<typename T><br>class SegmentTree {<br>// 注：也可以去掉 template<typename T>，改在这里定义 T<br>// using T = pair<int, int>;<br>int n;<br>vector<T> tree;<br>// 合并两个 val<br>T merge_val(T a, T b) const {<br>return max(a, b); // **根据题目修改**<br>}<br>// 合并左右儿子的 val 到当前节点的 val<br>void maintain(int node) {<br>tree[node] = merge_val(tree[node * 2], tree[node * 2 + 1]);<br>}<br>// 用 a 初始化线段树<br>// 时间复杂度 O(n)<br>void build(const vector<T>& a, int node, int l, int r) {<br>if (l == r) { // 叶子<br>tree[node] = a[l]; // 初始化叶节点的值<br>return;<br>}<br>int m = (l + r) / 2;<br>build(a, node * 2, l, m); // 初始化左子树<br>build(a, node * 2 + 1, m + 1, r); // 初始化右子树<br>maintain(node);<br>}<br>void update(int node, int l, int r, int i, T val) {<br>if (l == r) { // 叶子（到达目标）<br>// 如果想直接替换的话，可以写 tree[node] = val<br>tree[node] = merge_val(tree[node], val);<br>return;<br>}<br>int m = (l + r) / 2;<br>if (i <= m) { // i 在左子树<br>update(node * 2, l, m, i, val);<br>} else { // i 在右子树<br>update(node * 2 + 1, m + 1, r, i, val);<br>}<br>maintain(node);<br>}<br>T query(int node, int l, int r, int ql, int qr) const {<br>if (ql <= l && r <= qr) { // 当前子树完全在 [ql, qr] 内<br>return tree[node];<br>}<br>int m = (l + r) / 2;<br>if (qr <= m) { // [ql, qr] 在左子树<br>return query(node * 2, l, m, ql, qr);<br>}<br>if (ql > m) { // [ql, qr] 在右子树<br>return query(node * 2 + 1, m + 1, r, ql, qr);<br>}<br>T l_res = query(node * 2, l, m, ql, qr);<br>T r_res = query(node * 2 + 1, m + 1, r, ql, qr);<br>return merge_val(l_res, r_res);<br>}<br>public:<br>// 线段树维护一个长为 n 的数组（下标从 0 到 n-1），元素初始值为 init_val<br>SegmentTree(int n, T init_val) : SegmentTree(vector<T>(n, init_val)) {}<br>// 线段树维护数组 a<br>SegmentTree(const vector<T>& a) : n(a.size()), tree(2 << bit_width(a.size() - 1)) {<br>build(a, 1, 0, n - 1);<br>}<br>// 更新 a[i] 为 merge_val(a[i], val)<br>// 时间复杂度 O(log n)<br>void update(int i, T val) {<br>update(1, 0, n - 1, i, val);<br>}<br>// 返回用 merge_val 合并所有 a[i] 的计算结果，其中 i 在闭区间 [ql, qr] 中<br>// 时间复杂度 O(log n)<br>T query(int ql, int qr) const {<br>return query(1, 0, n - 1, ql, qr);<br>}<br>// 获取 a[i] 的值<br>// 时间复杂度 O(log n)<br>T get(int i) const {<br>return query(1, 0, n - 1, i, i);<br>}<br>};<br>int main() {<br>SegmentTree t(8, 0LL); // 如果这里写 0LL，那么 SegmentTree 存储的就是 long long 数据<br>t.update(0, 1LL << 60);<br>cout << t.query(0, 7) << endl;<br>vector<int> nums = {3, 1, 4, 1, 5, 9, 2, 6};<br>// 注意：如果要让 SegmentTree 存储 long long 数据，需要传入 vector<long long><br>SegmentTree t2(nums); // 这里 SegmentTree 存储的是 int 数据<br>cout << t2.query(0, 7) << endl;<br>return 0;<br>}<br>```<br>```go [sol-Go]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 线段树有两个下标，一个是线段树节点的下标，另一个是线段树维护的区间的下标<br>// 节点的下标：从 1 开始，如果你想改成从 0 开始，需要把左右儿子下标分别改成 node*2+1 和 node*2+2<br>// 区间的下标：从 0 开始<br>type seg []struct {<br>val int // **根据题目修改**<br>}<br>// 合并两个 val<br>func (seg) mergeVal(a, b int) int {<br>return max(a, b) // **根据题目修改**<br>}<br>// 线段树维护一个长为 n 的数组（下标从 0 到 n-1），元素初始值为 initVal<br>func newSegmentTree(n int, initVal int) seg {<br>a := make([]int, n)<br>for i := range a {<br>a[i] = initVal<br>}<br>return newSegmentTreeWithArray(a)<br>}<br>// 线段树维护数组 a<br>func newSegmentTreeWithArray(a []int) seg {<br>n := len(a)<br>t := make(seg, 2<<bits.Len(uint(n-1)))<br>t.build(a, 1, 0, n-1)<br>return t<br>}<br>// 合并左右儿子的 val 到当前节点的 val<br>func (t seg) maintain(node int) {<br>t[node].val = t.mergeVal(t[node*2].val, t[node*2+1].val)<br>}<br>// 用 a 初始化线段树<br>// 时间复杂度 O(n)<br>func (t seg) build(a []int, node, l, r int) {<br>if l == r { // 叶子<br>t[node].val = a[l] // 初始化叶节点的值<br>return<br>}<br>m := (l + r) / 2<br>t.build(a, node*2, l, m) // 初始化左子树<br>t.build(a, node*2+1, m+1, r) // 初始化右子树<br>t.maintain(node)<br>}<br>// 更新 a[i] 为 mergeVal(a[i], val)<br>// 调用 t.update(1, 0, n-1, i, val)<br>// 0 <= i <= n-1<br>// 时间复杂度 O(log n)<br>func (t seg) update(node, l, r, i int, val int) {<br>if l == r { // 叶子（到达目标）<br>// 如果想直接替换的话，可以写 t[o].val = val<br>t[node].val = t.mergeVal(t[node].val, val)<br>return<br>}<br>m := (l + r) / 2<br>if i <= m { // i 在左子树<br>t.update(node*2, l, m, i, val)<br>} else { // i 在右子树<br>t.update(node*2+1, m+1, r, i, val)<br>}<br>t.maintain(node)<br>}<br>// 返回用 mergeVal 合并所有 a[i] 的计算结果，其中 i 在闭区间 [ql, qr] 中<br>// 调用 t.query(1, 0, n-1, ql, qr)<br>// 如果只想获取 a[i]，可以调用 t.query(1, 0, n-1, i, i)<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>func (t seg) query(node, l, r, ql, qr int) int {<br>if ql <= l && r <= qr { // 当前子树完全在 [ql, qr] 内<br>return t[node].val<br>}<br>m := (l + r) / 2<br>if qr <= m { // [ql, qr] 在左子树<br>return t.query(node*2, l, m, ql, qr)<br>}<br>if ql > m { // [ql, qr] 在右子树<br>return t.query(node*2+1, m+1, r, ql, qr)<br>}<br>lRes := t.query(node*2, l, m, ql, qr)<br>rRes := t.query(node*2+1, m+1, r, ql, qr)<br>return t.mergeVal(lRes, rRes)<br>}<br>```<br>**思维扩展**：<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [
                {
                    "title": "3479. 将水果装入篮子 III",
                    "summary": "",
                    "src": "/fruits-into-baskets-iii/",
                    "original_src": "https://leetcode.cn/problems/fruits-into-baskets-iii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2178.0485179115,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2940. 找到 Alice 和 Bob 可以相遇的建筑",
                    "summary": "",
                    "src": "/find-building-where-alice-and-bob-can-meet/",
                    "original_src": "https://leetcode.cn/problems/find-building-where-alice-and-bob-can-meet/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2327.4743300299,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2286. 以组为单位订音乐会的门票",
                    "summary": "",
                    "src": "/booking-concert-tickets-in-groups/",
                    "original_src": "https://leetcode.cn/problems/booking-concert-tickets-in-groups/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2470.2118194809,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3161. 物块放置查询",
                    "summary": "",
                    "src": "/block-placement-queries/",
                    "original_src": "https://leetcode.cn/problems/block-placement-queries/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2513.0284514744,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2213. 由单个字符重复的最长子字符串",
                    "summary": "",
                    "src": "/longest-substring-of-one-repeating-character/",
                    "original_src": "https://leetcode.cn/problems/longest-substring-of-one-repeating-character/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2628.7957821141,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3525. 求出数组的 X 值 II",
                    "summary": "",
                    "src": "/find-x-value-of-array-ii/",
                    "original_src": "https://leetcode.cn/problems/find-x-value-of-array-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2644.6037406331,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3165. 不包含相邻元素的子序列的最大和",
                    "summary": "",
                    "src": "/maximum-sum-of-subsequence-with-non-adjacent-elements/",
                    "original_src": "https://leetcode.cn/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2697.6486586982,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3410. 删除所有值为某个元素后的最大子数组和",
                    "summary": "",
                    "src": "/maximize-subarray-sum-after-removing-all-occurrences-of-one-element/",
                    "original_src": "https://leetcode.cn/problems/maximize-subarray-sum-after-removing-all-occurrences-of-one-element/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2843.655465882,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3501. 操作后最大活跃区段数 II",
                    "summary": "",
                    "src": "/maximize-active-section-with-trade-ii/",
                    "original_src": "https://leetcode.cn/problems/maximize-active-section-with-trade-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2940.548809489,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "LCP 81. 与非的谜题",
                    "summary": "",
                    "src": "/ryfUiz/",
                    "original_src": "https://leetcode.cn/problems/ryfUiz/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2407. 最长递增子序列 II",
                    "summary": "",
                    "src": "/longest-increasing-subsequence-ii/",
                    "original_src": "https://leetcode.cn/problems/longest-increasing-subsequence-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2280.3143643878,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1157. 子数组中占绝大多数的元素",
                    "summary": "",
                    "src": "/online-majority-element-in-subarray/",
                    "original_src": "https://leetcode.cn/problems/online-majority-element-in-subarray/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2205.4304373587,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "nonLeafChild": [
                {
                    "title": "§8.4 Lazy 线段树（有区间更新）",
                    "summary": "把任意区间用 $\\mathcal{O}(\\log n)$ 个区间表示，线段树的每个节点记录对应区间的信息。<br>- **询问**：把询问区间拆分成 $\\mathcal{O}(\\log n)$ 个区间，对应着线段树的 $\\mathcal{O}(\\log n)$ 个节点，把这 $\\mathcal{O}(\\log n)$ 个节点的信息合并，即为答案。<br>- **区间更新**：仍然是拆分成 $\\mathcal{O}(\\log n)$ 个区间，对应着线段树的 $\\mathcal{O}(\\log n)$ 个节点。但对于其中的非叶节点，不把更新的内容往下传递给子节点，而是记录「发生了更新，内容为 xxx」，把更新的内容记录下来。直到后续的询问或更新操作，需要访问或修改更下面的子节点信息时，才把更新的内容往下传。<br>基础模板代码如下。为方便入门理解，我没有做复杂封装。通用模板代码可以参考 AtCoder Library 的 <a href=\"https://github.com/atcoder/ac-library/blob/master/atcoder/lazysegtree.hpp\">lazysegtree.hpp</a>。<br>```py [sol-Python3]<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "时间复杂度 O(log n)",
            "summary": "class Node:<br>__slots__ = 'val', 'todo'<br>class LazySegmentTree:<br>_TODO_INIT = 0  # **根据题目修改**<br>def __init__(self, n: int, init_val=0):<br>if isinstance(init_val, int):<br>init_val = [init_val] * n<br>self._n = n<br>self._tree = [Node() for _ in range(2 << (n - 1).bit_length())]<br>self._build(init_val, 1, 0, n - 1)<br>def _merge_val(self, a: int, b: int) -> int:<br>return a + b  # **根据题目修改**<br>def _merge_todo(self, a: int, b: int) -> int:<br>return a + b  # **根据题目修改**<br>def _apply(self, node: int, l: int, r: int, todo: int) -> None:<br>cur = self._tree[node]<br>cur.val += todo * (r - l + 1)  # **根据题目修改**<br>cur.todo = self._merge_todo(todo, cur.todo)<br>def _spread(self, node: int, l: int, r: int) -> None:<br>todo = self._tree[node].todo<br>if todo == self._TODO_INIT:  # 没有需要下传的信息<br>return<br>m = (l + r) // 2<br>self._apply(node * 2, l, m, todo)<br>self._apply(node * 2 + 1, m + 1, r, todo)<br>self._tree[node].todo = self._TODO_INIT  # 下传完毕<br>def _maintain(self, node: int) -> None:<br>self._tree[node].val = self._merge_val(self._tree[node * 2].val, self._tree[node * 2 + 1].val)<br>def _build(self, a: List[int], node: int, l: int, r: int) -> None:<br>self._tree[node].todo = self._TODO_INIT<br>if l == r:  # 叶子<br>self._tree[node].val = a[l]  # 初始化叶节点的值<br>return<br>m = (l + r) // 2<br>self._build(a, node * 2, l, m)  # 初始化左子树<br>self._build(a, node * 2 + 1, m + 1, r)  # 初始化右子树<br>self._maintain(node)<br>def _update(self, node: int, l: int, r: int, ql: int, qr: int, f: int) -> None:<br>if ql <= l and r <= qr:  # 当前子树完全在 [ql, qr] 内<br>self._apply(node, l, r, f)<br>return<br>self._spread(node, l, r)<br>m = (l + r) // 2<br>if ql <= m:  # 更新左子树<br>self._update(node * 2, l, m, ql, qr, f)<br>if qr > m:  # 更新右子树<br>self._update(node * 2 + 1, m + 1, r, ql, qr, f)<br>self._maintain(node)<br>def _query(self, node: int, l: int, r: int, ql: int, qr: int) -> int:<br>if ql <= l and r <= qr:  # 当前子树完全在 [ql, qr] 内<br>return self._tree[node].val<br>self._spread(node, l, r)<br>m = (l + r) // 2<br>if qr <= m:  # [ql, qr] 在左子树<br>return self._query(node * 2, l, m, ql, qr)<br>if ql > m:  # [ql, qr] 在右子树<br>return self._query(node * 2 + 1, m + 1, r, ql, qr)<br>l_res = self._query(node * 2, l, m, ql, qr)<br>r_res = self._query(node * 2 + 1, m + 1, r, ql, qr)<br>return self._merge_val(l_res, r_res)<br>def update(self, ql: int, qr: int, f: int) -> None:<br>self._update(1, 0, self._n - 1, ql, qr, f)<br>def query(self, ql: int, qr: int) -> int:<br>return self._query(1, 0, self._n - 1, ql, qr)<br>```<br>```java [sol-Java]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>class LazySegmentTree {<br>// 懒标记初始值<br>private static final long TODO_INIT = 0; // **根据题目修改**<br>private static final class Node {<br>long val; // **根据题目修改**<br>long todo;<br>}<br>// 合并两个 val<br>private long mergeVal(long a, long b) {<br>return a + b; // **根据题目修改**<br>}<br>// 合并两个懒标记<br>private long mergeTodo(long a, long b) {<br>return a + b; // **根据题目修改**<br>}<br>// 把懒标记作用到 node 子树（本例为区间加）<br>private void apply(int node, int l, int r, long todo) {<br>Node cur = tree[node];<br>// 计算 tree[node] 区间的整体变化<br>cur.val += todo * (r - l + 1); // **根据题目修改**<br>cur.todo = mergeTodo(todo, cur.todo);<br>}<br>private final int n;<br>private final Node[] tree;<br>// 线段树维护一个长为 n 的数组（下标从 0 到 n-1），元素初始值为 initVal<br>public LazySegmentTree(int n, long initVal) {<br>this.n = n;<br>long[] a = new long[n];<br>Arrays.fill(a, initVal);<br>tree = new Node[2 << (32 - Integer.numberOfLeadingZeros(n - 1))];<br>build(a, 1, 0, n - 1);<br>}<br>// 线段树维护数组 a<br>public LazySegmentTree(long[] a) {<br>n = a.length;<br>tree = new Node[2 << (32 - Integer.numberOfLeadingZeros(n - 1))];<br>build(a, 1, 0, n - 1);<br>}<br>// 用 f 更新 [ql, qr] 中的每个 a[i]<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>public void update(int ql, int qr, long f) {<br>update(1, 0, n - 1, ql, qr, f);<br>}<br>// 返回用 mergeVal 合并所有 a[i] 的计算结果，其中 i 在闭区间 [ql, qr] 中<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>public long query(int ql, int qr) {<br>return query(1, 0, n - 1, ql, qr);<br>}<br>// 把当前节点的懒标记下传给左右儿子<br>private void spread(int node, int l, int r) {<br>long todo = tree[node].todo;<br>if (todo == TODO_INIT) { // 没有需要下传的信息<br>return;<br>}<br>int m = (l + r) / 2;<br>apply(node * 2, l, m, todo);<br>apply(node * 2 + 1, m + 1, r, todo);<br>tree[node].todo = TODO_INIT; // 下传完毕<br>}<br>// 合并左右儿子的 val 到当前节点的 val<br>private void maintain(int node) {<br>tree[node].val = mergeVal(tree[node * 2].val, tree[node * 2 + 1].val);<br>}<br>// 用 a 初始化线段树<br>// 时间复杂度 O(n)<br>private void build(long[] a, int node, int l, int r) {<br>tree[node] = new Node();<br>tree[node].todo = TODO_INIT;<br>if (l == r) { // 叶子<br>tree[node].val = a[l]; // 初始化叶节点的值<br>return;<br>}<br>int m = (l + r) / 2;<br>build(a, node * 2, l, m); // 初始化左子树<br>build(a, node * 2 + 1, m + 1, r); // 初始化右子树<br>maintain(node);<br>}<br>private void update(int node, int l, int r, int ql, int qr, long f) {<br>if (ql <= l && r <= qr) { // 当前子树完全在 [ql, qr] 内<br>apply(node, l, r, f);<br>return;<br>}<br>spread(node, l, r);<br>int m = (l + r) / 2;<br>if (ql <= m) { // 更新左子树<br>update(node * 2, l, m, ql, qr, f);<br>}<br>if (qr > m) { // 更新右子树<br>update(node * 2 + 1, m + 1, r, ql, qr, f);<br>}<br>maintain(node);<br>}<br>private long query(int node, int l, int r, int ql, int qr) {<br>if (ql <= l && r <= qr) { // 当前子树完全在 [ql, qr] 内<br>return tree[node].val;<br>}<br>spread(node, l, r);<br>int m = (l + r) / 2;<br>if (qr <= m) { // [ql, qr] 在左子树<br>return query(node * 2, l, m, ql, qr);<br>}<br>if (ql > m) { // [ql, qr] 在右子树<br>return query(node * 2 + 1, m + 1, r, ql, qr);<br>}<br>long lRes = query(node * 2, l, m, ql, qr);<br>long rRes = query(node * 2 + 1, m + 1, r, ql, qr);<br>return mergeVal(lRes, rRes);<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>template<typename T, typename F><br>class LazySegmentTree {<br>// 注：也可以去掉 template<typename T, typename F>，改在这里定义 T 和 F<br>// using T = pair<int, int>;<br>// using F = pair<int, int>;<br>// 懒标记初始值<br>const F TODO_INIT = 0; // **根据题目修改**<br>struct Node {<br>T val;<br>F todo;<br>};<br>int n;<br>vector<Node> tree;<br>// 合并两个 val<br>T merge_val(T a, T b) const {<br>return a + b; // **根据题目修改**<br>}<br>// 合并两个懒标记<br>F merge_todo(F a, F b) const {<br>return a + b; // **根据题目修改**<br>}<br>// 把懒标记作用到 node 子树（本例为区间加）<br>void apply(int node, int l, int r, F todo) {<br>Node& cur = tree[node];<br>// 计算 tree[node] 区间的整体变化<br>cur.val += todo * (r - l + 1); // **根据题目修改**<br>cur.todo = merge_todo(todo, cur.todo);<br>}<br>// 把当前节点的懒标记下传给左右儿子<br>void spread(int node, int l, int r) {<br>Node& cur = tree[node];<br>F todo = cur.todo;<br>if (todo == TODO_INIT) { // 没有需要下传的信息<br>return;<br>}<br>int m = (l + r) / 2;<br>apply(node * 2, l, m, todo);<br>apply(node * 2 + 1, m + 1, r, todo);<br>cur.todo = TODO_INIT; // 下传完毕<br>}<br>// 合并左右儿子的 val 到当前节点的 val<br>void maintain(int node) {<br>tree[node].val = merge_val(tree[node * 2].val, tree[node * 2 + 1].val);<br>}<br>// 用 a 初始化线段树<br>// 时间复杂度 O(n)<br>void build(const vector<T>& a, int node, int l, int r) {<br>Node& cur = tree[node];<br>cur.todo = TODO_INIT;<br>if (l == r) { // 叶子<br>cur.val = a[l]; // 初始化叶节点的值<br>return;<br>}<br>int m = (l + r) / 2;<br>build(a, node * 2, l, m); // 初始化左子树<br>build(a, node * 2 + 1, m + 1, r); // 初始化右子树<br>maintain(node);<br>}<br>void update(int node, int l, int r, int ql, int qr, F f) {<br>if (ql <= l && r <= qr) { // 当前子树完全在 [ql, qr] 内<br>apply(node, l, r, f);<br>return;<br>}<br>spread(node, l, r);<br>int m = (l + r) / 2;<br>if (ql <= m) { // 更新左子树<br>update(node * 2, l, m, ql, qr, f);<br>}<br>if (qr > m) { // 更新右子树<br>update(node * 2 + 1, m + 1, r, ql, qr, f);<br>}<br>maintain(node);<br>}<br>T query(int node, int l, int r, int ql, int qr) {<br>if (ql <= l && r <= qr) { // 当前子树完全在 [ql, qr] 内<br>return tree[node].val;<br>}<br>spread(node, l, r);<br>int m = (l + r) / 2;<br>if (qr <= m) { // [ql, qr] 在左子树<br>return query(node * 2, l, m, ql, qr);<br>}<br>if (ql > m) { // [ql, qr] 在右子树<br>return query(node * 2 + 1, m + 1, r, ql, qr);<br>}<br>T l_res = query(node * 2, l, m, ql, qr);<br>T r_res = query(node * 2 + 1, m + 1, r, ql, qr);<br>return merge_val(l_res, r_res);<br>}<br>public:<br>// 线段树维护一个长为 n 的数组（下标从 0 到 n-1），元素初始值为 init_val<br>LazySegmentTree(int n, T init_val = 0) : LazySegmentTree(vector<T>(n, init_val)) {}<br>// 线段树维护数组 a<br>LazySegmentTree(const vector<T>& a) : n(a.size()), tree(2 << bit_width(a.size() - 1)) {<br>build(a, 1, 0, n - 1);<br>}<br>// 用 f 更新 [ql, qr] 中的每个 a[i]<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>void update(int ql, int qr, F f) {<br>update(1, 0, n - 1, ql, qr, f);<br>}<br>// 返回用 merge_val 合并所有 a[i] 的计算结果，其中 i 在闭区间 [ql, qr] 中<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>T query(int ql, int qr) {<br>return query(1, 0, n - 1, ql, qr);<br>}<br>};<br>int main() {<br>LazySegmentTree<long long, long long> t(8); // 默认值为 0<br>t.update(3, 5, 100);<br>t.update(4, 6, 10);<br>cout << t.query(0, 7) << endl;<br>vector<long long> nums = {3, 1, 4, 1, 5, 9, 2, 6};<br>LazySegmentTree<long long, long long> t2(nums);<br>t2.update(3, 5, 1);<br>t2.update(4, 6, 1);<br>cout << t2.query(0, 7) << endl;<br>return 0;<br>}<br>```<br>```go [sol-Go]<br>// 模板来源 https://leetcode.cn/circle/discuss/mOr1u6/<br>// 懒标记初始值<br>const todoInit int = 0 // **根据题目修改**<br>type lazySeg []struct {<br>val  int // **根据题目修改**<br>todo int<br>}<br>// 合并两个 val<br>func (lazySeg) mergeVal(a, b int) int {<br>return a + b // **根据题目修改**<br>}<br>// 合并两个懒标记<br>func (lazySeg) mergeTodo(a, b int) int {<br>return a + b // **根据题目修改**<br>}<br>// 把懒标记作用到 node 子树（本例为区间加）<br>func (t lazySeg) apply(node, l, r int, todo int) {<br>cur := &t[node]<br>// 计算 tree[node] 区间的整体变化<br>cur.val += todo * (r - l + 1) // **根据题目修改**<br>cur.todo = t.mergeTodo(todo, cur.todo)<br>}<br>// 线段树维护一个长为 n 的数组（下标从 0 到 n-1），元素初始值为 initVal<br>func newLazySegmentTree(n int, initVal int) lazySeg {<br>a := make([]int, n)<br>for i := range a {<br>a[i] = initVal<br>}<br>return newLazySegmentTreeWithArray(a)<br>}<br>// 线段树维护数组 a<br>func newLazySegmentTreeWithArray(a []int) lazySeg {<br>n := len(a)<br>t := make(lazySeg, 2<<bits.Len(uint(n-1)))<br>t.build(a, 1, 0, n-1)<br>return t<br>}<br>// 把当前节点的懒标记下传给左右儿子<br>func (t lazySeg) spread(node, l, r int) {<br>// 类似「断点续传」，接着完成之前没完成的下传任务<br>todo := t[node].todo<br>if todo == todoInit { // 没有需要下传的信息<br>return<br>}<br>m := (l + r) / 2<br>t.apply(node*2, l, m, todo)<br>t.apply(node*2+1, m+1, r, todo)<br>t[node].todo = todoInit // 下传完毕<br>}<br>// 合并左右儿子的 val 到当前节点的 val<br>func (t lazySeg) maintain(node int) {<br>t[node].val = t.mergeVal(t[node*2].val, t[node*2+1].val)<br>}<br>// 用 a 初始化线段树<br>// 时间复杂度 O(n)<br>func (t lazySeg) build(a []int, node, l, r int) {<br>t[node].todo = todoInit<br>if l == r { // 叶子<br>t[node].val = a[l] // 初始化叶节点的值<br>return<br>}<br>m := (l + r) / 2<br>t.build(a, node*2, l, m) // 初始化左子树<br>t.build(a, node*2+1, m+1, r) // 初始化右子树<br>t.maintain(node)<br>}<br>// 用 f 更新 [ql, qr] 中的每个 a[i]<br>// 调用 t.update(1, 0, n-1, ql, qr, f)<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>func (t lazySeg) update(node, l, r, ql, qr int, f int) {<br>if ql <= l && r <= qr { // 当前子树完全在 [ql, qr] 内<br>t.apply(node, l, r, f)<br>return<br>}<br>t.spread(node, l, r)<br>m := (l + r) / 2<br>if ql <= m { // 更新左子树<br>t.update(node*2, l, m, ql, qr, f)<br>}<br>if qr > m { // 更新右子树<br>t.update(node*2+1, m+1, r, ql, qr, f)<br>}<br>t.maintain(node)<br>}<br>// 返回用 mergeVal 合并所有 a[i] 的计算结果，其中 i 在闭区间 [ql, qr] 中<br>// 调用 t.query(1, 0, n-1, ql, qr)<br>// 0 <= ql <= qr <= n-1<br>// 时间复杂度 O(log n)<br>func (t lazySeg) query(node, l, r, ql, qr int) int {<br>if ql <= l && r <= qr { // 当前子树完全在 [ql, qr] 内<br>return t[node].val<br>}<br>t.spread(node, l, r)<br>m := (l + r) / 2<br>if qr <= m { // [ql, qr] 在左子树<br>return t.query(node*2, l, m, ql, qr)<br>}<br>if ql > m { // [ql, qr] 在右子树<br>return t.query(node*2+1, m+1, r, ql, qr)<br>}<br>lRes := t.query(node*2, l, m, ql, qr)<br>rRes := t.query(node*2+1, m+1, r, ql, qr)<br>return t.mergeVal(lRes, rRes)<br>}<br>```<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [
                {
                    "title": "2569. 更新数组后处理求和查询",
                    "summary": "",
                    "src": "/handling-sum-queries-after-update/",
                    "original_src": "https://leetcode.cn/problems/handling-sum-queries-after-update/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2397.8728428256,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1622. 奇妙序列",
                    "summary": "",
                    "src": "/fancy-sequence/",
                    "original_src": "https://leetcode.cn/problems/fancy-sequence/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2476.451764287,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2502. 设计内存分配器",
                    "summary": "",
                    "src": "/design-memory-allocator/",
                    "original_src": "https://leetcode.cn/problems/design-memory-allocator/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1745.5352025872,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2589. 完成所有任务的最少时间",
                    "summary": "",
                    "src": "/minimum-time-to-complete-all-tasks/",
                    "original_src": "https://leetcode.cn/problems/minimum-time-to-complete-all-tasks/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2380.5983169295,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2547. 拆分数组的最小代价",
                    "summary": "",
                    "src": "/minimum-cost-to-split-an-array/",
                    "original_src": "https://leetcode.cn/problems/minimum-cost-to-split-an-array/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2019.9859462755,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3569. 分割数组后不同质数的最大数目",
                    "summary": "",
                    "src": "/maximize-count-of-distinct-primes-after-split/",
                    "original_src": "https://leetcode.cn/problems/maximize-count-of-distinct-primes-after-split/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "850. 矩形面积 II",
                    "summary": "",
                    "src": "/rectangle-area-ii/",
                    "original_src": "https://leetcode.cn/problems/rectangle-area-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2235.9672341699,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3454. 分割正方形 II",
                    "summary": "",
                    "src": "/separate-squares-ii/",
                    "original_src": "https://leetcode.cn/problems/separate-squares-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2671.1046123182,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2916. 子数组不同元素数目的平方和 II",
                    "summary": "",
                    "src": "/subarrays-distinct-element-sum-of-squares-ii/",
                    "original_src": "https://leetcode.cn/problems/subarrays-distinct-element-sum-of-squares-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2816.0706257586,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "nonLeafChild": [
                {
                    "title": "§8.5 动态开点线段树",
                    "summary": "部分题目也可以用**珂朵莉树**解决。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "699. 掉落的方块",
                            "summary": "",
                            "src": "/falling-squares/",
                            "original_src": "https://leetcode.cn/problems/falling-squares/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "715. Range 模块",
                            "summary": "",
                            "src": "/range-module/",
                            "original_src": "https://leetcode.cn/problems/range-module/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "729. 我的日程安排表 I",
                            "summary": "",
                            "src": "/my-calendar-i/",
                            "original_src": "https://leetcode.cn/problems/my-calendar-i/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "731. 我的日程安排表 II",
                            "summary": "",
                            "src": "/my-calendar-ii/",
                            "original_src": "https://leetcode.cn/problems/my-calendar-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "732. 我的日程安排表 III",
                            "summary": "",
                            "src": "/my-calendar-iii/",
                            "original_src": "https://leetcode.cn/problems/my-calendar-iii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2276. 统计区间中的整数数目",
                            "summary": "",
                            "src": "/count-integers-in-intervals/",
                            "original_src": "https://leetcode.cn/problems/count-integers-in-intervals/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2222.4805422748,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3590. 第 K 小的路径异或和",
                            "summary": "",
                            "src": "/kth-smallest-path-xor-sum/",
                            "original_src": "https://leetcode.cn/problems/kth-smallest-path-xor-sum/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "九、伸展树（Splay 树）",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "2296. 设计一个文本编辑器",
                            "summary": "",
                            "src": "/design-a-text-editor/",
                            "original_src": "https://leetcode.cn/problems/design-a-text-editor/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1911.8282317986,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3526. 范围异或查询与子数组反转",
                            "summary": "",
                            "src": "/range-xor-queries-with-subarray-reversals/",
                            "original_src": "https://leetcode.cn/problems/range-xor-queries-with-subarray-reversals/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "十、分块算法、莫队算法",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "3590. 第 K 小的路径异或和",
                            "summary": "",
                            "src": "/kth-smallest-path-xor-sum/",
                            "original_src": "https://leetcode.cn/problems/kth-smallest-path-xor-sum/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "专题：离线算法",
                    "summary": "把询问**排序**，通过改变回答询问的顺序，使问题更容易处理。<br>> 相应的，**在线算法**就是按照 $\\textit{queries}$ 的顺序一个一个处理。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "2343. 裁剪数字后查询第 K 小的数字",
                            "summary": "",
                            "src": "/query-kth-smallest-trimmed-number/",
                            "original_src": "https://leetcode.cn/problems/query-kth-smallest-trimmed-number/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1651.569267834,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3607. 电网维护",
                            "summary": "",
                            "src": "/power-grid-maintenance/",
                            "original_src": "https://leetcode.cn/problems/power-grid-maintenance/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2070. 每一个查询的最大美丽值",
                            "summary": "",
                            "src": "/most-beautiful-item-for-each-query/",
                            "original_src": "https://leetcode.cn/problems/most-beautiful-item-for-each-query/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1724.1545485476,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1847. 最近的房间",
                            "summary": "",
                            "src": "/closest-room/",
                            "original_src": "https://leetcode.cn/problems/closest-room/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2081.7518764643,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2503. 矩阵查询可获得的最大分数",
                            "summary": "",
                            "src": "/maximum-number-of-points-from-grid-queries/",
                            "original_src": "https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2195.6540241654,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1851. 包含每个查询的最小区间",
                            "summary": "",
                            "src": "/minimum-interval-to-include-each-query/",
                            "original_src": "https://leetcode.cn/problems/minimum-interval-to-include-each-query/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2286.1378742318,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1697. 检查边长度限制的路径是否存在",
                            "summary": "",
                            "src": "/checking-existence-of-edge-length-limited-paths/",
                            "original_src": "https://leetcode.cn/problems/checking-existence-of-edge-length-limited-paths/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2300.1557840589,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2940. 找到 Alice 和 Bob 可以相遇的建筑",
                            "summary": "",
                            "src": "/find-building-where-alice-and-bob-can-meet/",
                            "original_src": "https://leetcode.cn/problems/find-building-where-alice-and-bob-can-meet/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2327.4743300299,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2747. 统计没有收到请求的服务器数目",
                            "summary": "",
                            "src": "/count-zero-request-servers/",
                            "original_src": "https://leetcode.cn/problems/count-zero-request-servers/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2405.3375364501,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3590. 第 K 小的路径异或和",
                            "summary": "",
                            "src": "/kth-smallest-path-xor-sum/",
                            "original_src": "https://leetcode.cn/problems/kth-smallest-path-xor-sum/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1938. 查询最大基因差",
                            "summary": "",
                            "src": "/maximum-genetic-difference-query/",
                            "original_src": "https://leetcode.cn/problems/maximum-genetic-difference-query/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2502.5176603922,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2736. 最大和查询",
                            "summary": "",
                            "src": "/maximum-sum-queries/",
                            "original_src": "https://leetcode.cn/problems/maximum-sum-queries/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2533.2830157959,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3382. 用点构造面积最大的矩形 II",
                            "summary": "",
                            "src": "/maximum-area-rectangle-with-point-constraints-ii/",
                            "original_src": "https://leetcode.cn/problems/maximum-area-rectangle-with-point-constraints-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2722.8634460016,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "算法题单",
                    "summary": "<a href=\"https://leetcode.cn/circle/discuss/RvFUtj/\">如何科学刷题？</a><br>1. <a href=\"/lc-rating/list/sliding_window\">滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）</a><br>2. <a href=\"/lc-rating/list/binary_search\">二分算法（二分答案/最小化最大值/最大化最小值/第K小）</a><br>3. <a href=\"/lc-rating/list/monotonic_stack\">单调栈（基础/矩形面积/贡献法/最小字典序）</a><br>4. <a href=\"/lc-rating/list/grid\">网格图（DFS/BFS/综合应用）</a><br>5. <a href=\"/lc-rating/list/bitwise_operations\">位运算（基础/性质/拆位/试填/恒等式/思维）</a><br>6. <a href=\"/lc-rating/list/graph\">图论算法（DFS/BFS/拓扑排序/基环树/最短路/最小生成树/网络流）</a><br>7. <a href=\"/lc-rating/list/dynamic_programming\">动态规划（入门/背包/划分/状态机/区间/状压/数位/数据结构优化/树形/博弈/概率期望）</a><br>8. <a href=\"/lc-rating/list/data_structure\">常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）</a><br>9. <a href=\"/lc-rating/list/math\">数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）</a><br>10. <a href=\"/lc-rating/list/greedy\">贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）</a><br>11. <a href=\"/lc-rating/list/trees\">链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）</a><br>12. <a href=\"/lc-rating/list/string\">字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）</a><br><a href=\"https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md\">我的题解精选（已分类）</a><br>欢迎关注 <a href=\"https://space.bilibili.com/206214\">B站@灵茶山艾府</a><br>如果你发现有题目可以补充进来，欢迎评论反馈。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        }
    ],
    "isPremium": false,
    "last_update": "2025-07-21 04:59:54"
} as ProblemCategory;