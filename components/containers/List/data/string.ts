import ProblemCategory from "@components/ProblemCatetory";

export default{
    "title": "分享丨【算法题单】字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组）",
    "summary": "",
    "src": "",
    "original_src": "https://leetcode.cn/circle/discuss/SJFwQI",
    "sort": 0,
    "isLeaf": false,
    "solution": "",
    "score": 0,
    "leafChild": [],
    "nonLeafChild": [
        {
            "title": "介绍",
            "summary": "<img src=\"https://pic.leetcode.cn/1728350300-LGjhkL-Knuth-Morris-Pratt.png\" alt=\"Knuth-Morris-Pratt.png\" style=\"width: 100%;\"><br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [],
            "nonLeafChild": [
                {
                    "title": "一、KMP（前缀的后缀）",
                    "summary": "<a href=\"https://www.zhihu.com/question/21923021/answer/37475572\">KMP 原理讲解</a><br>定义 $s$ 的真前缀为不等于 $s$ 的前缀，$s$ 的真后缀为不等于 $s$ 的后缀。<br>定义 $s$ 的 $\\text{border}$ 为既是 $s$ 的真前缀又是 $s$ 的真后缀的字符串。例如在 $s=\\texttt{aabcaa}$ 中，$\\texttt{a}$ 和 $\\texttt{aa}$ 都是 $s$ 的 $\\text{border}$。<br>对于模式串 $p$ 的每个前缀 $p[:i]$，计算这个前缀的最长 $\\text{border}$ 长度，记在 $\\pi$ 数组中。<br>利用 $\\pi$ 数组，可以快速计算模式串 $p$ 出现在文本串 $t$ 的哪些位置上。<br>> 注：$\\pi$ 数组的定义参考《算法导论》，国内数据结构教材通常定义为 $\\textit{next}$ 数组。以严蔚敏那本为例，二者的关系是 $\\textit{next}[i+1] = \\pi[i]+1$，即 $\\pi$ 数组整体右移一位，元素值加一。<br>模板：<br>```py [sol-Python3]<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "在文本串 text 中查找模式串 pattern，返回所有成功匹配的位置（pattern[0] 在 text 中的下标）",
            "summary": "def kmp(text: str, pattern: str) -> List[int]:<br>m = len(pattern)<br>pi = [0] * m<br>cnt = 0<br>for i in range(1, m):<br>b = pattern[i]<br>while cnt and pattern[cnt] != b:<br>cnt = pi[cnt - 1]<br>if pattern[cnt] == b:<br>cnt += 1<br>pi[i] = cnt<br>pos = []<br>cnt = 0<br>for i, b in enumerate(text):<br>while cnt and pattern[cnt] != b:<br>cnt = pi[cnt - 1]<br>if pattern[cnt] == b:<br>cnt += 1<br>if cnt == len(pattern):<br>pos.append(i - m + 1)<br>cnt = pi[cnt - 1]<br>return pos<br>```<br>```java [sol-Java]<br>class Solution {<br>// 在文本串 text 中查找模式串 pattern，返回所有成功匹配的位置（pattern[0] 在 text 中的下标）<br>private List<Integer> kmp(char[] text, char[] pattern) {<br>int m = pattern.length;<br>int[] pi = new int[m];<br>int cnt = 0;<br>for (int i = 1; i < m; i++) {<br>char b = pattern[i];<br>while (cnt > 0 && pattern[cnt] != b) {<br>cnt = pi[cnt - 1];<br>}<br>if (pattern[cnt] == b) {<br>cnt++;<br>}<br>pi[i] = cnt;<br>}<br>List<Integer> pos = new ArrayList<>();<br>cnt = 0;<br>for (int i = 0; i < text.length; i++) {<br>char b = text[i];<br>while (cnt > 0 && pattern[cnt] != b) {<br>cnt = pi[cnt - 1];<br>}<br>if (pattern[cnt] == b) {<br>cnt++;<br>}<br>if (cnt == m) {<br>pos.add(i - m + 1);<br>cnt = pi[cnt - 1];<br>}<br>}<br>return pos;<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 在文本串 text 中查找模式串 pattern，返回所有成功匹配的位置（pattern[0] 在 text 中的下标）<br>vector<int> kmp(const string& text, const string& pattern) {<br>int m = pattern.size();<br>vector<int> pi(m);<br>int cnt = 0;<br>for (int i = 1; i < m; i++) {<br>char b = pattern[i];<br>while (cnt && pattern[cnt] != b) {<br>cnt = pi[cnt - 1];<br>}<br>if (pattern[cnt] == b) {<br>cnt++;<br>}<br>pi[i] = cnt;<br>}<br>vector<int> pos;<br>cnt = 0;<br>for (int i = 0; i < text.size(); i++) {<br>char b = text[i];<br>while (cnt && pattern[cnt] != b) {<br>cnt = pi[cnt - 1];<br>}<br>if (pattern[cnt] == b) {<br>cnt++;<br>}<br>if (cnt == m) {<br>pos.push_back(i - m + 1);<br>cnt = pi[cnt - 1];<br>}<br>}<br>return pos;<br>}<br>```<br>```go [sol-Go]<br>// 在文本串 text 中查找模式串 pattern，返回所有成功匹配的位置（pattern[0] 在 text 中的下标）<br>func kmp(text, pattern string) (pos []int) {<br>m := len(pattern)<br>pi := make([]int, m)<br>cnt := 0<br>for i := 1; i < m; i++ {<br>b := pattern[i]<br>for cnt > 0 && pattern[cnt] != b {<br>cnt = pi[cnt-1]<br>}<br>if pattern[cnt] == b {<br>cnt++<br>}<br>pi[i] = cnt<br>}<br>cnt = 0<br>for i, b := range text {<br>for cnt > 0 && pattern[cnt] != byte(b) {<br>cnt = pi[cnt-1]<br>}<br>if pattern[cnt] == byte(b) {<br>cnt++<br>}<br>if cnt == m {<br>pos = append(pos, i-m+1)<br>cnt = pi[cnt-1]<br>}<br>}<br>return<br>}<br>```<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [
                {
                    "title": "28. 找出字符串中第一个匹配项的下标",
                    "summary": "",
                    "src": "/find-the-index-of-the-first-occurrence-in-a-string/",
                    "original_src": "https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "796. 旋转字符串",
                    "summary": "",
                    "src": "/rotate-string/",
                    "original_src": "https://leetcode.cn/problems/rotate-string/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1167.0749837258,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1392. 最长快乐前缀",
                    "summary": "",
                    "src": "/longest-happy-prefix/",
                    "original_src": "https://leetcode.cn/problems/longest-happy-prefix/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1876.146019008,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3036. 匹配模式数组的子数组数目 II",
                    "summary": "",
                    "src": "/number-of-subarrays-that-match-a-pattern-ii/",
                    "original_src": "https://leetcode.cn/problems/number-of-subarrays-that-match-a-pattern-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1894.5496928891,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1764. 通过连接另一个数组的子数组得到一个数组",
                    "summary": "",
                    "src": "/form-array-by-concatenating-subarrays-of-another-array/",
                    "original_src": "https://leetcode.cn/problems/form-array-by-concatenating-subarrays-of-another-array/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1588.3835994255,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1668. 最大重复子字符串",
                    "summary": "",
                    "src": "/maximum-repeating-substring/",
                    "original_src": "https://leetcode.cn/problems/maximum-repeating-substring/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1395.5132479177,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "459. 重复的子字符串",
                    "summary": "",
                    "src": "/repeated-substring-pattern/",
                    "original_src": "https://leetcode.cn/problems/repeated-substring-pattern/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2800. 包含三个字符串的最短字符串",
                    "summary": "",
                    "src": "/shortest-string-that-contains-three-strings/",
                    "original_src": "https://leetcode.cn/problems/shortest-string-that-contains-three-strings/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 1855.561153694,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3008. 找出数组中的美丽下标 II",
                    "summary": "",
                    "src": "/find-beautiful-indices-in-the-given-array-ii/",
                    "original_src": "https://leetcode.cn/problems/find-beautiful-indices-in-the-given-array-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2016.2085876254,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "214. 最短回文串",
                    "summary": "",
                    "src": "/shortest-palindrome/",
                    "original_src": "https://leetcode.cn/problems/shortest-palindrome/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3529. 统计水平子串和垂直子串重叠格子的数目",
                    "summary": "",
                    "src": "/count-cells-in-overlapping-horizontal-and-vertical-substrings/",
                    "original_src": "https://leetcode.cn/problems/count-cells-in-overlapping-horizontal-and-vertical-substrings/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2105.0143242092,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "686. 重复叠加字符串匹配",
                    "summary": "",
                    "src": "/repeated-string-match/",
                    "original_src": "https://leetcode.cn/problems/repeated-string-match/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3455. 最短匹配子字符串",
                    "summary": "",
                    "src": "/shortest-matching-substring/",
                    "original_src": "https://leetcode.cn/problems/shortest-matching-substring/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2303.1891955206,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1397. 找到所有好字符串",
                    "summary": "",
                    "src": "/find-all-good-strings/",
                    "original_src": "https://leetcode.cn/problems/find-all-good-strings/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2666.668150845,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3037. 在无限流中寻找模式 II",
                    "summary": "",
                    "src": "/find-pattern-in-infinite-stream-ii/",
                    "original_src": "https://leetcode.cn/problems/find-pattern-in-infinite-stream-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": null,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": true,
                    "last_update": ""
                }
            ],
            "nonLeafChild": [
                {
                    "title": "二、Z 函数（后缀的前缀）",
                    "summary": "> **注**：在国内算法竞赛圈，这个算法也叫扩展 KMP。<br>对于字符串 $s$，定义 $z[i]$ 表示后缀 $s[i:]$ 与 $s$ 的 LCP（最长公共前缀）的长度，其中 $s[i:]$ 表示从 $s[i]$ 到 $s[n-1]$ 的子串。<br>常用技巧是构造字符串 $\\textit{pattern}+\\textit{s}$，如果发现 $z[m+i]\\ge m$（$m$ 是 $\\textit{pattern}$ 的长度），则说明从 $s[i]$ 开始的子串与 $\\textit{pattern}$ 匹配。<br>所以上面的一些 KMP 题目（子串匹配相关的），也可以用 Z 函数解决。读者可以尝试用 Z 函数解决 <a href=\"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/\">28. 找出字符串中第一个匹配项的下标</a>。<br>模板：<br>```py [sol-Python3]<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        },
        {
            "title": "计算并返回 z 数组，其中 z[i] = |LCP(s[i:], s)|",
            "summary": "def calc_z(s: str) -> List[int]:<br>n = len(s)<br>z = [0] * n<br>box_l = box_r = 0<br>for i in range(1, n):<br>if i <= box_r:<br>z[i] = min(z[i - box_l], box_r - i + 1)<br>while i + z[i] < n and s[z[i]] == s[i + z[i]]:<br>box_l, box_r = i, i + z[i]<br>z[i] += 1<br>z[0] = n<br>return z<br>```<br>```java [sol-Java]<br>class Solution {<br>// 计算并返回 z 数组，其中 z[i] = |LCP(s[i:], s)|<br>private int[] calcZ(char[] s) {<br>int n = s.length;<br>int[] z = new int[n];<br>int boxL = 0;<br>int boxR = 0;<br>for (int i = 1; i < n; i++) {<br>if (i <= boxR) {<br>z[i] = Math.min(z[i - boxL], boxR - i + 1);<br>}<br>while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {<br>boxL = i;<br>boxR = i + z[i];<br>z[i]++;<br>}<br>}<br>z[0] = n;<br>return z;<br>}<br>}<br>```<br>```cpp [sol-C++]<br>// 计算并返回 z 数组，其中 z[i] = |LCP(s[i:], s)|<br>vector<int> calc_z(const string& s) {<br>int n = s.size();<br>vector<int> z(n);<br>int box_l = 0, box_r = 0;<br>for (int i = 1; i < n; i++) {<br>if (i <= box_r) {<br>z[i] = min(z[i - box_l], box_r - i + 1);<br>}<br>while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {<br>box_l = i;<br>box_r = i + z[i];<br>z[i]++;<br>}<br>}<br>z[0] = n;<br>return z;<br>}<br>```<br>```go [sol-Go]<br>// 计算并返回 z 数组，其中 z[i] = |LCP(s[i:], s)|<br>func calcZ(s string) []int {<br>n := len(s)<br>z := make([]int, n)<br>boxL, boxR := 0, 0<br>for i := 1; i < n; i++ {<br>if i <= boxR {<br>z[i] = min(z[i-boxL], boxR-i+1)<br>}<br>for i+z[i] < n && s[z[i]] == s[i+z[i]] {<br>boxL, boxR = i, i+z[i]<br>z[i]++<br>}<br>}<br>z[0] = n<br>return z<br>}<br>```<br>**LCP 数组**<br>",
            "src": "",
            "original_src": "",
            "sort": 0,
            "isLeaf": false,
            "solution": "",
            "score": 0,
            "leafChild": [
                {
                    "title": "2223. 构造字符串的总得分和",
                    "summary": "",
                    "src": "/sum-of-scores-of-built-strings/",
                    "original_src": "https://leetcode.cn/problems/sum-of-scores-of-built-strings/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2220.0903365738,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3031. 将单词恢复初始状态所需的最短时间 II",
                    "summary": "",
                    "src": "/minimum-time-to-revert-word-to-initial-state-ii/",
                    "original_src": "https://leetcode.cn/problems/minimum-time-to-revert-word-to-initial-state-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2277.9557248587,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3045. 统计前后缀下标对 II",
                    "summary": "",
                    "src": "/count-prefix-and-suffix-pairs-ii/",
                    "original_src": "https://leetcode.cn/problems/count-prefix-and-suffix-pairs-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2327.5726642605,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3303. 第一个几乎相等子字符串的下标",
                    "summary": "",
                    "src": "/find-the-occurrence-of-first-almost-equal-substring/",
                    "original_src": "https://leetcode.cn/problems/find-the-occurrence-of-first-almost-equal-substring/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2509.3686325754,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3292. 形成目标字符串需要的最少字符串数 II",
                    "summary": "",
                    "src": "/minimum-number-of-valid-strings-to-form-target-ii/",
                    "original_src": "https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-ii/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2661.736901362,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3474. 字典序最小的生成字符串",
                    "summary": "",
                    "src": "/lexicographically-smallest-generated-string/",
                    "original_src": "https://leetcode.cn/problems/lexicographically-smallest-generated-string/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2605.3698165497,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "2430. 对字母串可执行的最大删除数",
                    "summary": "",
                    "src": "/maximum-deletions-on-a-string/",
                    "original_src": "https://leetcode.cn/problems/maximum-deletions-on-a-string/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2101.867342004,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "3388. 统计数组中的美丽分割",
                    "summary": "",
                    "src": "/count-beautiful-splits-in-an-array/",
                    "original_src": "https://leetcode.cn/problems/count-beautiful-splits-in-an-array/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2364.6818184488,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "1977. 划分数字的方案数",
                    "summary": "",
                    "src": "/number-of-ways-to-separate-numbers/",
                    "original_src": "https://leetcode.cn/problems/number-of-ways-to-separate-numbers/",
                    "sort": 0,
                    "isLeaf": true,
                    "solution": null,
                    "score": 2817.267212602,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "nonLeafChild": [
                {
                    "title": "三、Manacher 算法（回文串）",
                    "summary": "Manacher 算法可以计算以 $s[i]$（或者 $s[i]$ 和 $s[i+1]$）为回文中心的最长回文子串的长度。<br>此外，还可以：<br>- 判断任意子串是否为回文串。<br>- 计算从 $s[i]$ 开始的最长回文子串的长度。<br>- 计算以 $s[i]$ 结尾的最长回文子串的长度。<br>> Z 函数和 Manacher 算法都会用到类似 Z-box 的概念，在学习时，可以对比体会。<br><a href=\"https://leetcode.cn/problems/longest-palindromic-substring/solutions/2958179/mo-ban-on-manacher-suan-fa-pythonjavacgo-t6cx/\">模板代码</a><br>用到**中心扩展法**（及其思想）的算法题：<br><a href=\"https://leetcode.cn/problems/longest-palindromic-substring/solutions/2958179/mo-ban-on-manacher-suan-fa-pythonjavacgo-t6cx/\">模板代码</a><br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "5. 最长回文子串",
                            "summary": "",
                            "src": "/longest-palindromic-substring/",
                            "original_src": "https://leetcode.cn/problems/longest-palindromic-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "647. 回文子串",
                            "summary": "",
                            "src": "/palindromic-substrings/",
                            "original_src": "https://leetcode.cn/problems/palindromic-substrings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "214. 最短回文串",
                            "summary": "",
                            "src": "/shortest-palindrome/",
                            "original_src": "https://leetcode.cn/problems/shortest-palindrome/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3327. 判断 DFS 字符串是否是回文串",
                            "summary": "",
                            "src": "/check-if-dfs-strings-are-palindromes/",
                            "original_src": "https://leetcode.cn/problems/check-if-dfs-strings-are-palindromes/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2454.1900261902,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1745. 分割回文串 IV",
                            "summary": "",
                            "src": "/palindrome-partitioning-iv/",
                            "original_src": "https://leetcode.cn/problems/palindrome-partitioning-iv/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1924.964639491,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1960. 两个回文子字符串长度的最大乘积",
                            "summary": "",
                            "src": "/maximum-product-of-the-length-of-two-palindromic-substrings/",
                            "original_src": "https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-substrings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2690.5859406179,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3504. 子字符串连接后的最长回文串 II",
                            "summary": "",
                            "src": "/longest-palindrome-after-substring-concatenation-ii/",
                            "original_src": "https://leetcode.cn/problems/longest-palindrome-after-substring-concatenation-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2397.700544564,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "5. 最长回文子串",
                            "summary": "",
                            "src": "/longest-palindromic-substring/",
                            "original_src": "https://leetcode.cn/problems/longest-palindromic-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2472. 不重叠回文子字符串的最大数目",
                            "summary": "",
                            "src": "/maximum-number-of-non-overlapping-palindrome-substrings/",
                            "original_src": "https://leetcode.cn/problems/maximum-number-of-non-overlapping-palindrome-substrings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2013.4354344791,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3504. 子字符串连接后的最长回文串 II",
                            "summary": "",
                            "src": "/longest-palindrome-after-substring-concatenation-ii/",
                            "original_src": "https://leetcode.cn/problems/longest-palindrome-after-substring-concatenation-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2397.700544564,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3579. 字符串转换需要的最小操作数",
                            "summary": "",
                            "src": "/minimum-steps-to-convert-string-with-operations/",
                            "original_src": "https://leetcode.cn/problems/minimum-steps-to-convert-string-with-operations/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2492.7039894164,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3615. 图中的最长回文路径",
                            "summary": "",
                            "src": "/longest-palindromic-path-in-graph/",
                            "original_src": "https://leetcode.cn/problems/longest-palindromic-path-in-graph/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2463.3702712563,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "四、字符串哈希",
                    "summary": "本题单的大多数题目都可以用字符串哈希解决。<br>推荐先把 <a href=\"https://leetcode.cn/problems/find-substring-with-given-hash-value/\">2156. 查找给定哈希值的子串</a> 做了，对理解**多项式哈希**的计算方法有帮助。<br>**模板代码**见 <a href=\"https://leetcode.cn/problems/construct-string-with-minimum-cost/solutions/2833949/hou-zhui-shu-zu-by-endlesscheng-32h9/\">我的题解</a>，包含单模哈希和双模哈希。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "28. 找出字符串中第一个匹配项的下标",
                            "summary": "",
                            "src": "/find-the-index-of-the-first-occurrence-in-a-string/",
                            "original_src": "https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "187. 重复的 DNA 序列",
                            "summary": "",
                            "src": "/repeated-dna-sequences/",
                            "original_src": "https://leetcode.cn/problems/repeated-dna-sequences/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1316. 不同的循环子字符串",
                            "summary": "",
                            "src": "/distinct-echo-substrings/",
                            "original_src": "https://leetcode.cn/problems/distinct-echo-substrings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1836.536348078,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1297. 子串的最大出现次数",
                            "summary": "",
                            "src": "/maximum-number-of-occurrences-of-a-substring/",
                            "original_src": "https://leetcode.cn/problems/maximum-number-of-occurrences-of-a-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1748.1523771585,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2261. 含最多 K 个可整除元素的子数组",
                            "summary": "",
                            "src": "/k-divisible-elements-subarrays/",
                            "original_src": "https://leetcode.cn/problems/k-divisible-elements-subarrays/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1724.394164934,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3213. 最小代价构造字符串",
                            "summary": "",
                            "src": "/construct-string-with-minimum-cost/",
                            "original_src": "https://leetcode.cn/problems/construct-string-with-minimum-cost/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2170.7313528632,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1367. 二叉树中的链表",
                            "summary": "",
                            "src": "/linked-list-in-binary-tree/",
                            "original_src": "https://leetcode.cn/problems/linked-list-in-binary-tree/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1649.9728054796,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1044. 最长重复子串",
                            "summary": "",
                            "src": "/longest-duplicate-substring/",
                            "original_src": "https://leetcode.cn/problems/longest-duplicate-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2428.7985254341,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "718. 最长重复子数组",
                            "summary": "",
                            "src": "/maximum-length-of-repeated-subarray/",
                            "original_src": "https://leetcode.cn/problems/maximum-length-of-repeated-subarray/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1923. 最长公共子路径",
                            "summary": "",
                            "src": "/longest-common-subpath/",
                            "original_src": "https://leetcode.cn/problems/longest-common-subpath/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2661.0670044656,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3292. 形成目标字符串需要的最少字符串数 II",
                            "summary": "",
                            "src": "/minimum-number-of-valid-strings-to-form-target-ii/",
                            "original_src": "https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2661.736901362,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2168. 每个数字的频率都相同的独特子字符串的数量",
                            "summary": "",
                            "src": "/unique-substrings-with-equal-digit-frequency/",
                            "original_src": "https://leetcode.cn/problems/unique-substrings-with-equal-digit-frequency/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "1554. 只有一个不同字符的字符串",
                            "summary": "",
                            "src": "/strings-differ-by-one-character/",
                            "original_src": "https://leetcode.cn/problems/strings-differ-by-one-character/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "1062. 最长重复子串",
                            "summary": "",
                            "src": "/longest-repeating-substring/",
                            "original_src": "https://leetcode.cn/problems/longest-repeating-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "五、最小表示法",
                    "summary": "定义**循环左移**操作：把字符串 $s$ 的第一个字符 $s[0]$ 移除，添加到 $s$ 的末尾。例如 $\\texttt{abcd}$ 操作一次后得到 $\\texttt{bcda}$。<br>问题：你可以执行任意次循环左移操作，计算你能得到的字典序最小的字符串。<br>推荐先完成 <a href=\"https://leetcode.cn/problems/last-substring-in-lexicographical-order/\">1163. 按字典序排在最后的子串</a>。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "899. 有序队列",
                            "summary": "",
                            "src": "/orderly-queue/",
                            "original_src": "https://leetcode.cn/problems/orderly-queue/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2096.6098086765,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3403. 从盒子中找出字典序最大的字符串 I",
                            "summary": "",
                            "src": "/find-the-lexicographically-largest-string-from-the-box-i/",
                            "original_src": "https://leetcode.cn/problems/find-the-lexicographically-largest-string-from-the-box-i/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1761.8759092138,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3406. 从盒子中找出字典序最大的字符串 II",
                            "summary": "",
                            "src": "/find-the-lexicographically-largest-string-from-the-box-ii/",
                            "original_src": "https://leetcode.cn/problems/find-the-lexicographically-largest-string-from-the-box-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "六、字典树",
                    "summary": "- 见 <a href=\"/lc-rating/list/data_structure\">数据结构题单</a> 第六章。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "七、AC 自动机",
                    "summary": "AC 自动机 = 字典树 + KMP。<br>由于这些题目也可以用其他算法（字符串哈希等）解决，难度分仅供参考。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "1032. 字符流",
                            "summary": "",
                            "src": "/stream-of-characters/",
                            "original_src": "https://leetcode.cn/problems/stream-of-characters/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1970.4608098164,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "面试题 17.17. 多次搜索",
                            "summary": "",
                            "src": "/multi-search-lcci/",
                            "original_src": "https://leetcode.cn/problems/multi-search-lcci/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1408. 数组中的字符串匹配",
                            "summary": "",
                            "src": "/string-matching-in-an-array/",
                            "original_src": "https://leetcode.cn/problems/string-matching-in-an-array/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1223.3861903833,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3213. 最小代价构造字符串",
                            "summary": "",
                            "src": "/construct-string-with-minimum-cost/",
                            "original_src": "https://leetcode.cn/problems/construct-string-with-minimum-cost/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2170.7313528632,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2781. 最长合法子字符串的长度",
                            "summary": "",
                            "src": "/length-of-the-longest-valid-substring/",
                            "original_src": "https://leetcode.cn/problems/length-of-the-longest-valid-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2203.5694828019,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3292. 形成目标字符串需要的最少字符串数 II",
                            "summary": "",
                            "src": "/minimum-number-of-valid-strings-to-form-target-ii/",
                            "original_src": "https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2661.736901362,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "八、后缀数组/后缀自动机",
                    "summary": "由于这些题目也可以用其他算法（字符串哈希等）解决，难度分仅供参考。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "1163. 按字典序排在最后的子串",
                            "summary": "",
                            "src": "/last-substring-in-lexicographical-order/",
                            "original_src": "https://leetcode.cn/problems/last-substring-in-lexicographical-order/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1864.0948676111,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1754. 构造字典序最大的合并字符串",
                            "summary": "",
                            "src": "/largest-merge-of-two-strings/",
                            "original_src": "https://leetcode.cn/problems/largest-merge-of-two-strings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1828.6438563573,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2904. 最短且字典序最小的美丽子字符串",
                            "summary": "",
                            "src": "/shortest-and-lexicographically-smallest-beautiful-string/",
                            "original_src": "https://leetcode.cn/problems/shortest-and-lexicographically-smallest-beautiful-string/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1483.3041242255,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3213. 最小代价构造字符串",
                            "summary": "",
                            "src": "/construct-string-with-minimum-cost/",
                            "original_src": "https://leetcode.cn/problems/construct-string-with-minimum-cost/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2170.7313528632,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1044. 最长重复子串",
                            "summary": "",
                            "src": "/longest-duplicate-substring/",
                            "original_src": "https://leetcode.cn/problems/longest-duplicate-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2428.7985254341,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "718. 最长重复子数组",
                            "summary": "",
                            "src": "/maximum-length-of-repeated-subarray/",
                            "original_src": "https://leetcode.cn/problems/maximum-length-of-repeated-subarray/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1923. 最长公共子路径",
                            "summary": "",
                            "src": "/longest-common-subpath/",
                            "original_src": "https://leetcode.cn/problems/longest-common-subpath/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2661.0670044656,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1408. 数组中的字符串匹配",
                            "summary": "",
                            "src": "/string-matching-in-an-array/",
                            "original_src": "https://leetcode.cn/problems/string-matching-in-an-array/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1223.3861903833,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3076. 数组中的最短非公共子字符串",
                            "summary": "",
                            "src": "/shortest-uncommon-substring-in-an-array/",
                            "original_src": "https://leetcode.cn/problems/shortest-uncommon-substring-in-an-array/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1635.1802054842,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3504. 子字符串连接后的最长回文串 II",
                            "summary": "",
                            "src": "/longest-palindrome-after-substring-concatenation-ii/",
                            "original_src": "https://leetcode.cn/problems/longest-palindrome-after-substring-concatenation-ii/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2397.700544564,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1316. 不同的循环子字符串",
                            "summary": "",
                            "src": "/distinct-echo-substrings/",
                            "original_src": "https://leetcode.cn/problems/distinct-echo-substrings/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1836.536348078,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "3388. 统计数组中的美丽分割",
                            "summary": "",
                            "src": "/count-beautiful-splits-in-an-array/",
                            "original_src": "https://leetcode.cn/problems/count-beautiful-splits-in-an-array/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2364.6818184488,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2564. 子字符串异或查询",
                            "summary": "",
                            "src": "/substring-xor-queries/",
                            "original_src": "https://leetcode.cn/problems/substring-xor-queries/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1959.2696201953,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1698. 字符串的不同子字符串个数",
                            "summary": "",
                            "src": "/number-of-distinct-substrings-in-a-string/",
                            "original_src": "https://leetcode.cn/problems/number-of-distinct-substrings-in-a-string/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "1062. 最长重复子串",
                            "summary": "",
                            "src": "/longest-repeating-substring/",
                            "original_src": "https://leetcode.cn/problems/longest-repeating-substring/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "3135. 通过添加或删除结尾字符来同化字符串",
                            "summary": "",
                            "src": "/equalize-strings-by-adding-or-removing-characters-at-ends/",
                            "original_src": "https://leetcode.cn/problems/equalize-strings-by-adding-or-removing-characters-at-ends/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "九、子序列自动机",
                    "summary": "上面都是和**子串**相关的算法，本节是和**子序列**相关的算法：子序列自动机。<br>虽然名字有些高大上，但实际上只是预处理 $\\ge i$ 的最近字母 $\\textit{c}$ 的下标而已。<br>见 <a href=\"https://leetcode.cn/problems/is-subsequence/solutions/2813031/jian-ji-xie-fa-pythonjavaccgojsrust-by-e-mz22/\">讲解</a> 中的「进阶问题」。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "792. 匹配子序列的单词数",
                            "summary": "",
                            "src": "/number-of-matching-subsequences/",
                            "original_src": "https://leetcode.cn/problems/number-of-matching-subsequences/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 1695.3076664977,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "514. 自由之路",
                            "summary": "",
                            "src": "/freedom-trail/",
                            "original_src": "https://leetcode.cn/problems/freedom-trail/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "2014. 重复 K 次的最长子序列",
                            "summary": "",
                            "src": "/longest-subsequence-repeated-k-times/",
                            "original_src": "https://leetcode.cn/problems/longest-subsequence-repeated-k-times/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2558.3297484354,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "1055. 形成字符串的最短路径",
                            "summary": "",
                            "src": "/shortest-way-to-form-string/",
                            "original_src": "https://leetcode.cn/problems/shortest-way-to-form-string/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        },
                        {
                            "title": "727. 最小窗口子序列",
                            "summary": "",
                            "src": "/minimum-window-subsequence/",
                            "original_src": "https://leetcode.cn/problems/minimum-window-subsequence/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": true,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "十、其他",
                    "summary": "",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [
                        {
                            "title": "3485. 删除元素后 K 个字符串的最长公共前缀",
                            "summary": "",
                            "src": "/longest-common-prefix-of-k-strings-after-removal/",
                            "original_src": "https://leetcode.cn/problems/longest-common-prefix-of-k-strings-after-removal/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": 2289.6436758228,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        },
                        {
                            "title": "466. 统计重复个数",
                            "summary": "",
                            "src": "/count-the-repetitions/",
                            "original_src": "https://leetcode.cn/problems/count-the-repetitions/",
                            "sort": 0,
                            "isLeaf": true,
                            "solution": null,
                            "score": null,
                            "leafChild": [],
                            "nonLeafChild": [],
                            "isPremium": false,
                            "last_update": ""
                        }
                    ],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                },
                {
                    "title": "算法题单",
                    "summary": "<a href=\"https://leetcode.cn/circle/discuss/RvFUtj/\">如何科学刷题？</a><br>1. <a href=\"/lc-rating/list/sliding_window\">滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）</a><br>2. <a href=\"/lc-rating/list/binary_search\">二分算法（二分答案/最小化最大值/最大化最小值/第K小）</a><br>3. <a href=\"/lc-rating/list/monotonic_stack\">单调栈（基础/矩形面积/贡献法/最小字典序）</a><br>4. <a href=\"/lc-rating/list/grid\">网格图（DFS/BFS/综合应用）</a><br>5. <a href=\"/lc-rating/list/bitwise_operations\">位运算（基础/性质/拆位/试填/恒等式/思维）</a><br>6. <a href=\"/lc-rating/list/graph\">图论算法（DFS/BFS/拓扑排序/基环树/最短路/最小生成树/网络流）</a><br>7. <a href=\"/lc-rating/list/dynamic_programming\">动态规划（入门/背包/划分/状态机/区间/状压/数位/数据结构优化/树形/博弈/概率期望）</a><br>8. <a href=\"/lc-rating/list/data_structure\">常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）</a><br>9. <a href=\"/lc-rating/list/math\">数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）</a><br>10. <a href=\"/lc-rating/list/greedy\">贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）</a><br>11. <a href=\"/lc-rating/list/trees\">链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）</a><br>12. <a href=\"/lc-rating/list/string\">字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）</a><br><a href=\"https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md\">我的题解精选（已分类）</a><br>欢迎关注 <a href=\"https://space.bilibili.com/206214\">B站@灵茶山艾府</a><br>如果你发现有题目可以补充进来，欢迎评论反馈。<br>",
                    "src": "",
                    "original_src": "",
                    "sort": 0,
                    "isLeaf": false,
                    "solution": "",
                    "score": 0,
                    "leafChild": [],
                    "nonLeafChild": [],
                    "isPremium": false,
                    "last_update": ""
                }
            ],
            "isPremium": false,
            "last_update": ""
        }
    ],
    "isPremium": false,
    "last_update": "2025-07-13 12:50:01"
} as ProblemCategory;